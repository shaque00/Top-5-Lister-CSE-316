{"ast":null,"code":"var _jsxFileName = \"/Users/ghost/Desktop/316-FinalProject/client/src/store/index.js\",\n    _s = $RefreshSig$();\n\nimport { createContext, useContext, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport jsTPS from '../common/jsTPS';\nimport api from '../api';\nimport MoveItem_Transaction from '../transactions/MoveItem_Transaction';\nimport UpdateItem_Transaction from '../transactions/UpdateItem_Transaction';\nimport AuthContext from '../auth';\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n// THIS IS THE CONTEXT WE'LL USE TO SHARE OUR STORE\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const GlobalStoreContext = /*#__PURE__*/createContext({}); // THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\n\nexport const GlobalStoreActionType = {\n  CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n  CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n  CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n  LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n  MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\",\n  UNMARK_LIST_FOR_DELETION: \"UNMARK_LIST_FOR_DELETION\",\n  SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n  SET_ITEM_EDIT_ACTIVE: \"SET_ITEM_EDIT_ACTIVE\",\n  SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n  ADD_LIKE_DISLIKE: \"ADD_LIKE_DISLIKE\",\n  ADD_VIEW: \"ADD_VIEW\",\n  ADD_COMMENT: \"ADD_COMMENT\",\n  PUBLISH_LIST: \"PUBLISH_LIST\",\n  HOME: \"HOME\",\n  USER_LISTS: \"USER_LISTS\",\n  COMMUNITY_LISTS: \"COMMUNITY_LISTS\",\n  ALL_LISTS: \"ALL_LISTS\"\n}; // WE'LL NEED THIS TO PROCESS TRANSACTIONS\n\nconst tps = new jsTPS(); // WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\n\nfunction GlobalStoreContextProvider(props) {\n  _s();\n\n  // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n  const [store, setStore] = useState({\n    idNamePairs: [],\n    currentList: null,\n    newListCounter: 0,\n    listNameActive: false,\n    itemActive: false,\n    listMarkedForDeletion: null,\n    whichLists: null\n  });\n  const history = useHistory(); // SINCE WE'VE WRAPPED THE STORE IN THE AUTH CONTEXT WE CAN ACCESS THE USER HERE\n\n  const {\n    auth\n  } = useContext(AuthContext); // HERE'S THE DATA STORE'S REDUCER, IT MUST\n  // HANDLE EVERY TYPE OF STATE CHANGE\n\n  const storeReducer = action => {\n    const {\n      type,\n      payload\n    } = action;\n\n    switch (type) {\n      // LIST UPDATE OF ITS NAME\n      case GlobalStoreActionType.CHANGE_LIST_NAME:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: payload.top5List,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // STOP EDITING THE CURRENT LIST\n\n      case GlobalStoreActionType.CLOSE_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // CREATE A NEW LIST\n\n      case GlobalStoreActionType.CREATE_NEW_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter + 1,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // GET ALL THE LISTS SO WE CAN PRESENT THEM\n\n      case GlobalStoreActionType.LOAD_ID_NAME_PAIRS:\n        {\n          return setStore({\n            idNamePairs: payload,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // PREPARE TO DELETE A LIST\n\n      case GlobalStoreActionType.MARK_LIST_FOR_DELETION:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: payload\n          });\n        }\n      // PREPARE TO DELETE A LIST\n\n      case GlobalStoreActionType.UNMARK_LIST_FOR_DELETION:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // UPDATE A LIST\n\n      case GlobalStoreActionType.SET_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // START EDITING A LIST ITEM\n\n      case GlobalStoreActionType.SET_ITEM_EDIT_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: true,\n            listMarkedForDeletion: null\n          });\n        }\n      // START EDITING A LIST NAME\n\n      case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: true,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n\n      default:\n        return store;\n    }\n  }; // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n  // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n  // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n  // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n\n\n  store.changeListName = async function (id, newName) {\n    let response = await api.getTop5ListById(id);\n\n    if (response.data.success) {\n      let top5List = response.data.top5List;\n      top5List.name = newName;\n\n      async function updateList(top5List) {\n        response = await api.updateTop5ListById(top5List._id, top5List);\n\n        if (response.data.success) {\n          async function getListPairs(top5List) {\n            response = await api.getTop5ListPairs();\n\n            if (response.data.success) {\n              let pairsArray = response.data.idNamePairs;\n              storeReducer({\n                type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                payload: {\n                  idNamePairs: pairsArray,\n                  top5List: top5List\n                }\n              });\n            }\n          }\n\n          getListPairs(top5List);\n        }\n      }\n\n      updateList(top5List);\n    }\n  }; // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n\n\n  store.closeCurrentList = function () {\n    storeReducer({\n      type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n      payload: {}\n    });\n    tps.clearAllTransactions();\n    history.push(\"/\");\n  }; // THIS FUNCTION CREATES A NEW LIST\n\n\n  store.createNewList = async function () {\n    console.log(\"asd\");\n    let newListName = \"Untitled\" + store.newListCounter;\n    let payload = {\n      name: newListName,\n      items: [\"?\", \"?\", \"?\", \"?\", \"?\"],\n      ownerEmail: auth.user.email,\n      likes: 0,\n      dislikes: 0,\n      views: 0,\n      date: null,\n      comments: [],\n      ldMap: new Map()\n    };\n    console.log(auth.user.email);\n    const response = await api.createTop5List(payload);\n\n    if (response.data.success) {\n      tps.clearAllTransactions();\n      let newList = response.data.top5List;\n      storeReducer({\n        type: GlobalStoreActionType.CREATE_NEW_LIST,\n        payload: newList\n      }); // IF IT'S A VALID LIST THEN LET'S START EDITING IT\n\n      history.push(\"/top5list/\" + newList._id);\n    } else {\n      console.log(\"API FAILED TO CREATE A NEW LIST\");\n    }\n  }; // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n\n\n  store.loadIdNamePairs = async function () {\n    const response = await api.getTop5ListPairs();\n\n    if (response.data.success) {\n      let pairsArray = response.data.idNamePairs;\n      console.log(pairsArray);\n      storeReducer({\n        type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n        payload: pairsArray\n      });\n    } else {\n      console.log(\"API FAILED TO GET THE LIST PAIRS\");\n    }\n  }; // THE FOLLOWING 5 FUNCTIONS ARE FOR COORDINATING THE DELETION\n  // OF A LIST, WHICH INCLUDES USING A VERIFICATION MODAL. THE\n  // FUNCTIONS ARE markListForDeletion, deleteList, deleteMarkedList,\n  // showDeleteListModal, and hideDeleteListModal\n\n\n  store.markListForDeletion = async function (id) {\n    console.log(\"Trying to mark the list\"); // GET THE LIST\n\n    let response = await api.getTop5ListById(id);\n\n    if (response.data.success) {\n      let top5List = response.data.top5List;\n      console.log(top5List.name);\n      storeReducer({\n        type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n        payload: top5List\n      });\n    }\n  };\n\n  store.addView = async function (id) {};\n\n  store.deleteList = async function (listToDelete) {\n    let response = await api.deleteTop5ListById(listToDelete._id);\n\n    if (response.data.success) {\n      store.loadIdNamePairs();\n      history.push(\"/\");\n    }\n  };\n\n  store.deleteMarkedList = function () {\n    store.deleteList(store.listMarkedForDeletion);\n  };\n\n  store.unmarkListForDeletion = function () {\n    storeReducer({\n      type: GlobalStoreActionType.UNMARK_LIST_FOR_DELETION,\n      payload: null\n    });\n  }; // THE FOLLOWING 8 FUNCTIONS ARE FOR COORDINATING THE UPDATING\n  // OF A LIST, WHICH INCLUDES DEALING WITH THE TRANSACTION STACK. THE\n  // FUNCTIONS ARE setCurrentList, addMoveItemTransaction, addUpdateItemTransaction,\n  // moveItem, updateItem, updateCurrentList, undo, and redo\n\n\n  store.setCurrentList = async function (id) {\n    let response = await api.getTop5ListById(id);\n\n    if (response.data.success) {\n      let top5List = response.data.top5List;\n      response = await api.updateTop5ListById(top5List._id, top5List);\n\n      if (response.data.success) {\n        storeReducer({\n          type: GlobalStoreActionType.SET_CURRENT_LIST,\n          payload: top5List\n        });\n        history.push(\"/top5list/\" + top5List._id);\n      }\n    }\n  };\n\n  store.addMoveItemTransaction = function (start, end) {\n    let transaction = new MoveItem_Transaction(store, start, end);\n    tps.addTransaction(transaction);\n  };\n\n  store.addChangeItemTransaction = function (newText, index) {\n    let transaction = new UpdateItem_Transaction(store, index, store.currentList.items[index], newText);\n    tps.addTransaction(transaction);\n  };\n\n  store.addUpdateItemTransaction = function (newText, index) {\n    console.log(newText, \"Sadsf\");\n    let oldText = store.currentList.items[index];\n    let transaction = new UpdateItem_Transaction(store, index, oldText, newText);\n    tps.addTransaction(transaction);\n  };\n\n  store.moveItem = function (start, end) {\n    start -= 1;\n    end -= 1;\n\n    if (start < end) {\n      let temp = store.currentList.items[start];\n\n      for (let i = start; i < end; i++) {\n        store.currentList.items[i] = store.currentList.items[i + 1];\n      }\n\n      store.currentList.items[end] = temp;\n    } else if (start > end) {\n      let temp = store.currentList.items[start];\n\n      for (let i = start; i > end; i--) {\n        store.currentList.items[i] = store.currentList.items[i - 1];\n      }\n\n      store.currentList.items[end] = temp;\n    } // NOW MAKE IT OFFICIAL\n\n\n    store.updateCurrentList();\n  };\n\n  store.updateItem = function (index, newItem) {\n    store.currentList.items[index] = newItem;\n    store.updateCurrentList();\n  };\n\n  store.updateCurrentList = async function () {\n    const response = await api.updateTop5ListById(store.currentList._id, store.currentList);\n\n    if (response.data.success) {\n      storeReducer({\n        type: GlobalStoreActionType.SET_CURRENT_LIST,\n        payload: store.currentList\n      });\n    }\n  };\n\n  store.undo = function () {\n    tps.undoTransaction();\n  };\n\n  store.redo = function () {\n    tps.doTransaction();\n  };\n\n  store.canUndo = function () {\n    return tps.hasTransactionToUndo();\n  };\n\n  store.canRedo = function () {\n    return tps.hasTransactionToRedo();\n  }; // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n\n\n  store.setIsListNameEditActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n      payload: null\n    });\n  }; // THIS FUNCTION ENABLES THE PROCESS OF EDITING AN ITEM\n\n\n  store.setIsItemEditActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_ITEM_EDIT_ACTIVE,\n      payload: null\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(GlobalStoreContext.Provider, {\n    value: {\n      store\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 412,\n    columnNumber: 9\n  }, this);\n}\n\n_s(GlobalStoreContextProvider, \"KpmDs9lscVS44RLV3BI6UXkL6ZY=\", false, function () {\n  return [useHistory];\n});\n\n_c = GlobalStoreContextProvider;\nexport default GlobalStoreContext;\nexport { GlobalStoreContextProvider };\n\nvar _c;\n\n$RefreshReg$(_c, \"GlobalStoreContextProvider\");","map":{"version":3,"sources":["/Users/ghost/Desktop/316-FinalProject/client/src/store/index.js"],"names":["createContext","useContext","useState","useHistory","jsTPS","api","MoveItem_Transaction","UpdateItem_Transaction","AuthContext","GlobalStoreContext","GlobalStoreActionType","CHANGE_LIST_NAME","CLOSE_CURRENT_LIST","CREATE_NEW_LIST","LOAD_ID_NAME_PAIRS","MARK_LIST_FOR_DELETION","UNMARK_LIST_FOR_DELETION","SET_CURRENT_LIST","SET_ITEM_EDIT_ACTIVE","SET_LIST_NAME_EDIT_ACTIVE","ADD_LIKE_DISLIKE","ADD_VIEW","ADD_COMMENT","PUBLISH_LIST","HOME","USER_LISTS","COMMUNITY_LISTS","ALL_LISTS","tps","GlobalStoreContextProvider","props","store","setStore","idNamePairs","currentList","newListCounter","listNameActive","itemActive","listMarkedForDeletion","whichLists","history","auth","storeReducer","action","type","payload","top5List","isListNameEditActive","isItemEditActive","changeListName","id","newName","response","getTop5ListById","data","success","name","updateList","updateTop5ListById","_id","getListPairs","getTop5ListPairs","pairsArray","closeCurrentList","clearAllTransactions","push","createNewList","console","log","newListName","items","ownerEmail","user","email","likes","dislikes","views","date","comments","ldMap","Map","createTop5List","newList","loadIdNamePairs","markListForDeletion","addView","deleteList","listToDelete","deleteTop5ListById","deleteMarkedList","unmarkListForDeletion","setCurrentList","addMoveItemTransaction","start","end","transaction","addTransaction","addChangeItemTransaction","newText","index","addUpdateItemTransaction","oldText","moveItem","temp","i","updateCurrentList","updateItem","newItem","undo","undoTransaction","redo","doTransaction","canUndo","hasTransactionToUndo","canRedo","hasTransactionToRedo","setIsListNameEditActive","setIsItemEditActive","children"],"mappings":"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","sourcesContent":["import { createContext, useContext, useState } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport jsTPS from '../common/jsTPS'\nimport api from '../api'\nimport MoveItem_Transaction from '../transactions/MoveItem_Transaction'\nimport UpdateItem_Transaction from '../transactions/UpdateItem_Transaction'\nimport AuthContext from '../auth'\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n\n// THIS IS THE CONTEXT WE'LL USE TO SHARE OUR STORE\nexport const GlobalStoreContext = createContext({});\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport const GlobalStoreActionType = {\n    CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n    CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n    CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n    LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n    MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\",\n    UNMARK_LIST_FOR_DELETION: \"UNMARK_LIST_FOR_DELETION\",\n    SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n    SET_ITEM_EDIT_ACTIVE: \"SET_ITEM_EDIT_ACTIVE\",\n    SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n    ADD_LIKE_DISLIKE: \"ADD_LIKE_DISLIKE\",\n    ADD_VIEW: \"ADD_VIEW\",\n    ADD_COMMENT: \"ADD_COMMENT\",\n    PUBLISH_LIST: \"PUBLISH_LIST\",\n    HOME: \"HOME\",\n    USER_LISTS: \"USER_LISTS\",\n    COMMUNITY_LISTS: \"COMMUNITY_LISTS\",\n    ALL_LISTS: \"ALL_LISTS\"\n}\n\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\nconst tps = new jsTPS();\n\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nfunction GlobalStoreContextProvider(props) {\n    // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n    const [store, setStore] = useState({\n        idNamePairs: [],\n        currentList: null,\n        newListCounter: 0,\n        listNameActive: false,\n        itemActive: false,\n        listMarkedForDeletion: null,\n        whichLists: null\n    });\n    const history = useHistory();\n\n    // SINCE WE'VE WRAPPED THE STORE IN THE AUTH CONTEXT WE CAN ACCESS THE USER HERE\n    const { auth } = useContext(AuthContext);\n\n    // HERE'S THE DATA STORE'S REDUCER, IT MUST\n    // HANDLE EVERY TYPE OF STATE CHANGE\n    const storeReducer = (action) => {\n        const { type, payload } = action;\n        switch (type) {\n            // LIST UPDATE OF ITS NAME\n            case GlobalStoreActionType.CHANGE_LIST_NAME: {\n                return setStore({\n                    idNamePairs: payload.idNamePairs,\n                    currentList: payload.top5List,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null\n                });\n            }\n            // STOP EDITING THE CURRENT LIST\n            case GlobalStoreActionType.CLOSE_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null\n                })\n            }\n            // CREATE A NEW LIST\n            case GlobalStoreActionType.CREATE_NEW_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter + 1,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null\n                })\n            }\n            // GET ALL THE LISTS SO WE CAN PRESENT THEM\n            case GlobalStoreActionType.LOAD_ID_NAME_PAIRS: {\n                return setStore({\n                    idNamePairs: payload,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null\n                });\n            }\n            // PREPARE TO DELETE A LIST\n            case GlobalStoreActionType.MARK_LIST_FOR_DELETION: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: payload\n                });\n            }\n            // PREPARE TO DELETE A LIST\n            case GlobalStoreActionType.UNMARK_LIST_FOR_DELETION: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null\n                });\n            }\n            // UPDATE A LIST\n            case GlobalStoreActionType.SET_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null\n                });\n            }\n            // START EDITING A LIST ITEM\n            case GlobalStoreActionType.SET_ITEM_EDIT_ACTIVE: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: store.currentList,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: true,\n                    listMarkedForDeletion: null\n                });\n            }\n            // START EDITING A LIST NAME\n            case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: true,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null\n                });\n            }\n            default:\n                return store;\n        }\n    }\n\n    // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n    // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n    // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n    // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n    store.changeListName = async function (id, newName) {\n        let response = await api.getTop5ListById(id);\n        if (response.data.success) {\n            let top5List = response.data.top5List;\n            top5List.name = newName;\n            async function updateList(top5List) {\n                response = await api.updateTop5ListById(top5List._id, top5List);\n                if (response.data.success) {\n                    async function getListPairs(top5List) {\n                        response = await api.getTop5ListPairs();\n                        if (response.data.success) {\n                            let pairsArray = response.data.idNamePairs;\n                            storeReducer({\n                                type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                                payload: {\n                                    idNamePairs: pairsArray,\n                                    top5List: top5List\n                                }\n                            });\n                        }\n                    }\n                    getListPairs(top5List);\n                }\n            }\n            updateList(top5List);\n        }\n    }\n\n    // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n    store.closeCurrentList = function () {\n        storeReducer({\n            type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n            payload: {}\n        });\n        \n        tps.clearAllTransactions();\n        history.push(\"/\");\n    }\n\n    // THIS FUNCTION CREATES A NEW LIST\n    store.createNewList = async function () {\n        console.log(\"asd\");\n        let newListName = \"Untitled\" + store.newListCounter;\n        let payload = {\n            name: newListName,\n            items: [\"?\", \"?\", \"?\", \"?\", \"?\"],\n            ownerEmail: auth.user.email,\n            likes: 0,\n            dislikes: 0,\n            views: 0,\n            date: null, \n            comments: [],\n            ldMap: new Map()\n        };\n        console.log(auth.user.email);\n        const response = await api.createTop5List(payload);\n        if (response.data.success) {\n            tps.clearAllTransactions();\n            let newList = response.data.top5List;\n            storeReducer({\n                type: GlobalStoreActionType.CREATE_NEW_LIST,\n                payload: newList\n            }\n            );\n\n            // IF IT'S A VALID LIST THEN LET'S START EDITING IT\n            history.push(\"/top5list/\" + newList._id);\n        }\n        else {\n            console.log(\"API FAILED TO CREATE A NEW LIST\");\n        }\n    }\n\n    // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n    store.loadIdNamePairs = async function () {\n        const response = await api.getTop5ListPairs();\n        if (response.data.success) {\n            let pairsArray = response.data.idNamePairs;\n            console.log(pairsArray);\n            storeReducer({\n                type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n                payload: pairsArray\n            });\n        }\n        else {\n            console.log(\"API FAILED TO GET THE LIST PAIRS\");\n        }\n    }\n\n    // THE FOLLOWING 5 FUNCTIONS ARE FOR COORDINATING THE DELETION\n    // OF A LIST, WHICH INCLUDES USING A VERIFICATION MODAL. THE\n    // FUNCTIONS ARE markListForDeletion, deleteList, deleteMarkedList,\n    // showDeleteListModal, and hideDeleteListModal\n    store.markListForDeletion = async function (id) {\n        console.log(\"Trying to mark the list\");\n        // GET THE LIST\n        let response = await api.getTop5ListById(id);\n        if (response.data.success) {\n            let top5List = response.data.top5List;\n            console.log(top5List.name);\n            storeReducer({\n                type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n                payload: top5List\n            });\n        }\n    }\n\n    store.addView = async function(id){\n\n    }\n\n    store.deleteList = async function (listToDelete) {\n        let response = await api.deleteTop5ListById(listToDelete._id);\n        if (response.data.success) {\n            store.loadIdNamePairs();\n            history.push(\"/\");\n        }\n    }\n\n    store.deleteMarkedList = function () {\n        store.deleteList(store.listMarkedForDeletion);\n    }\n\n    store.unmarkListForDeletion = function () {\n        storeReducer({\n            type: GlobalStoreActionType.UNMARK_LIST_FOR_DELETION,\n            payload: null\n        });\n    }\n\n    // THE FOLLOWING 8 FUNCTIONS ARE FOR COORDINATING THE UPDATING\n    // OF A LIST, WHICH INCLUDES DEALING WITH THE TRANSACTION STACK. THE\n    // FUNCTIONS ARE setCurrentList, addMoveItemTransaction, addUpdateItemTransaction,\n    // moveItem, updateItem, updateCurrentList, undo, and redo\n    store.setCurrentList = async function (id) {\n        let response = await api.getTop5ListById(id);\n        if (response.data.success) {\n            let top5List = response.data.top5List;\n\n            response = await api.updateTop5ListById(top5List._id, top5List);\n            if (response.data.success) {\n                storeReducer({\n                    type: GlobalStoreActionType.SET_CURRENT_LIST,\n                    payload: top5List\n                });\n                history.push(\"/top5list/\" + top5List._id);\n            }\n        }\n    }\n\n    store.addMoveItemTransaction = function (start, end) {\n        let transaction = new MoveItem_Transaction(store, start, end);\n        tps.addTransaction(transaction);\n    }\n\n    store.addChangeItemTransaction = function(newText, index){\n        let transaction = new UpdateItem_Transaction(store, index, store.currentList.items[index], newText);\n        tps.addTransaction(transaction);\n    }\n\n    store.addUpdateItemTransaction = function (newText, index) {\n        console.log(newText, \"Sadsf\");\n        let oldText = store.currentList.items[index];\n        let transaction = new UpdateItem_Transaction(store, index, oldText, newText);\n        tps.addTransaction(transaction);\n    }\n\n    store.moveItem = function (start, end) {\n        start -= 1;\n        end -= 1;\n        if (start < end) {\n            let temp = store.currentList.items[start];\n            for (let i = start; i < end; i++) {\n                store.currentList.items[i] = store.currentList.items[i + 1];\n            }\n            store.currentList.items[end] = temp;\n        }\n        else if (start > end) {\n            let temp = store.currentList.items[start];\n            for (let i = start; i > end; i--) {\n                store.currentList.items[i] = store.currentList.items[i - 1];\n            }\n            store.currentList.items[end] = temp;\n        }\n\n        // NOW MAKE IT OFFICIAL\n        store.updateCurrentList();\n    }\n\n    store.updateItem = function (index, newItem) {\n        store.currentList.items[index] = newItem;\n        store.updateCurrentList();\n    }\n\n    store.updateCurrentList = async function () {\n        const response = await api.updateTop5ListById(store.currentList._id, store.currentList);\n        if (response.data.success) {\n            storeReducer({\n                type: GlobalStoreActionType.SET_CURRENT_LIST,\n                payload: store.currentList\n            });\n        }\n    }\n\n    store.undo = function () {\n        tps.undoTransaction();\n    }\n\n    store.redo = function () {\n        tps.doTransaction();\n    }\n\n    store.canUndo = function() {\n        return tps.hasTransactionToUndo();\n    }\n\n    store.canRedo = function() {\n        return tps.hasTransactionToRedo();\n    }\n\n    // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n    store.setIsListNameEditActive = function () {\n        storeReducer({\n            type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n            payload: null\n        });\n    }\n\n    // THIS FUNCTION ENABLES THE PROCESS OF EDITING AN ITEM\n    store.setIsItemEditActive = function () {\n        storeReducer({\n            type: GlobalStoreActionType.SET_ITEM_EDIT_ACTIVE,\n            payload: null\n        });\n    }\n\n    return (\n        <GlobalStoreContext.Provider value={{\n            store\n        }}>\n            {props.children}\n        </GlobalStoreContext.Provider>\n    );\n}\n\nexport default GlobalStoreContext;\nexport { GlobalStoreContextProvider };"]},"metadata":{},"sourceType":"module"}