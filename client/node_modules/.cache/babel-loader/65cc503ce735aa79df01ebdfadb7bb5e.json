{"ast":null,"code":"var _jsxFileName = \"/Users/ghost/Desktop/316-FinalProject/client/src/auth/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useEffect, useState } from \"react\";\nimport { useHistory } from 'react-router-dom';\nimport api from '../api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nconsole.log(\"create AuthContext: \" + AuthContext); // THESE ARE ALL THE TYPES OF UPDATES TO OUR AUTH STATE THAT CAN BE PROCESSED\n\nexport const AuthActionType = {\n  GET_LOGGED_IN: \"GET_LOGGED_IN\",\n  REGISTER_USER: \"REGISTER_USER\",\n  LOGIN_USER: \"LOGIN_USER\",\n  LOGOUT_USER: \"LOGUT_USER\",\n  SET_ERR: \"SET_ERR\",\n  REMOVE_ERR: \"REMOVE_ERR\"\n};\n\nfunction AuthContextProvider(props) {\n  _s();\n\n  const [auth, setAuth] = useState({\n    user: null,\n    loggedIn: false,\n    error: null\n  });\n  const history = useHistory();\n  useEffect(() => {\n    auth.getLoggedIn();\n  }, []);\n\n  const authReducer = action => {\n    const {\n      type,\n      payload\n    } = action;\n\n    switch (type) {\n      case AuthActionType.GET_LOGGED_IN:\n        {\n          return setAuth({\n            user: payload.user,\n            loggedIn: payload.loggedIn,\n            error: null\n          });\n        }\n\n      case AuthActionType.REGISTER_USER:\n        {\n          return setAuth({\n            user: payload.user,\n            loggedIn: true,\n            error: null\n          });\n        }\n\n      case AuthActionType.LOGIN_USER:\n        {\n          return setAuth({\n            user: payload.user,\n            loggedIn: true,\n            error: null\n          });\n        }\n\n      case AuthActionType.LOGIN_USER:\n        {\n          return setAuth({\n            user: null,\n            loggedIn: false,\n            error: null\n          });\n        }\n\n      case AuthActionType.SET_ERR:\n        {\n          return setAuth({\n            user: null,\n            loggedIn: false,\n            error: payload.message\n          });\n        }\n\n      case AuthActionType.LOGOUT_USER:\n        {\n          return setAuth({\n            user: null,\n            loggedIn: false,\n            error: null\n          });\n        }\n\n      case AuthActionType.REMOVE_ERR:\n        {\n          return setAuth({\n            user: null,\n            loggedIn: false,\n            error: null\n          });\n        }\n\n      default:\n        return auth;\n    }\n  };\n\n  auth.removeError = function () {\n    authReducer({\n      type: AuthActionType.REMOVE_ERR,\n      payload: {\n        loggedIn: null,\n        user: null\n      }\n    });\n  };\n\n  auth.getLoggedIn = async function () {\n    const response = await api.getLoggedIn();\n\n    if (response.status === 200) {\n      authReducer({\n        type: AuthActionType.GET_LOGGED_IN,\n        payload: {\n          loggedIn: response.data.loggedIn,\n          user: response.data.user\n        }\n      });\n    }\n  };\n\n  auth.logoutUser = async function (userData, store) {\n    console.log(\"trying to logou\");\n    authReducer({\n      type: AuthActionType.LOGOUT_USER,\n      payload: {\n        user: null\n      }\n    });\n    history.push(\"/\");\n  };\n\n  auth.loginUser = async function (userData, store) {\n    console.log(\"Attempting to Login\");\n    let response;\n    let error;\n\n    try {\n      response = await api.loginUser(userData);\n    } catch (err) {\n      error = err.response.data.errorMessage;\n    } //console.log(error);\n\n\n    if (response) {\n      if (response.status === 200) {\n        console.log(response);\n        authReducer({\n          type: AuthActionType.REGISTER_USER,\n          payload: {\n            user: response.data.user\n          }\n        });\n        history.push(\"/\");\n        store.loadIdNamePairs();\n      }\n    } else {\n      authReducer({\n        type: AuthActionType.SET_ERR,\n        payload: {\n          message: error\n        }\n      });\n      console.log(\"Here\");\n    }\n  };\n\n  auth.registerUser = async function (userData, store) {\n    console.log(\"Trying to reegisster User\");\n    let response;\n    let error;\n\n    try {\n      response = await api.registerUser(userData);\n    } catch (err) {\n      error = err.response.data.errorMessage;\n    }\n\n    if (response) {\n      if (response.status === 200) {\n        authReducer({\n          type: AuthActionType.REGISTER_USER,\n          payload: {\n            user: response.data.user\n          }\n        });\n        history.push(\"/\");\n        store.loadIdNamePairs();\n      }\n    } else {\n      authReducer({\n        type: AuthActionType.SET_ERR,\n        payload: {\n          message: error\n        }\n      });\n      console.log(error);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      auth\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 194,\n    columnNumber: 9\n  }, this);\n}\n\n_s(AuthContextProvider, \"HZ3ujLwo+t+fDdmNJDMI2GTaDVU=\", false, function () {\n  return [useHistory];\n});\n\n_c = AuthContextProvider;\nexport default AuthContext;\nexport { AuthContextProvider };\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"sources":["/Users/ghost/Desktop/316-FinalProject/client/src/auth/index.js"],"names":["React","createContext","useEffect","useState","useHistory","api","AuthContext","console","log","AuthActionType","GET_LOGGED_IN","REGISTER_USER","LOGIN_USER","LOGOUT_USER","SET_ERR","REMOVE_ERR","AuthContextProvider","props","auth","setAuth","user","loggedIn","error","history","getLoggedIn","authReducer","action","type","payload","message","removeError","response","status","data","logoutUser","userData","store","push","loginUser","err","errorMessage","loadIdNamePairs","registerUser","children"],"mappings":"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","sourcesContent":["import React, { createContext, useEffect, useState } from \"react\";\nimport { useHistory } from 'react-router-dom'\nimport api from '../api'\n\nconst AuthContext = createContext();\nconsole.log(\"create AuthContext: \" + AuthContext);\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR AUTH STATE THAT CAN BE PROCESSED\nexport const AuthActionType = {\n    GET_LOGGED_IN: \"GET_LOGGED_IN\",\n    REGISTER_USER: \"REGISTER_USER\",\n    LOGIN_USER:    \"LOGIN_USER\",\n    LOGOUT_USER:   \"LOGUT_USER\",\n    SET_ERR:       \"SET_ERR\",\n    REMOVE_ERR:    \"REMOVE_ERR\"\n\n}\n\nfunction AuthContextProvider(props) {\n    const [auth, setAuth] = useState({\n        user: null,\n        loggedIn: false,\n        error: null\n    });\n    const history = useHistory();\n\n    useEffect(() => {\n        auth.getLoggedIn();\n    }, []);\n\n    const authReducer = (action) => {\n        const { type, payload } = action;\n        switch (type) {\n            case AuthActionType.GET_LOGGED_IN: {\n                return setAuth({\n                    user: payload.user,\n                    loggedIn: payload.loggedIn,\n                    error: null\n                });\n            }\n            case AuthActionType.REGISTER_USER: {\n                return setAuth({\n                    user: payload.user,\n                    loggedIn: true,\n                    error: null\n                })\n            }\n            case AuthActionType.LOGIN_USER:{\n                return setAuth ({\n                    user: payload.user,\n                    loggedIn: true,\n                    error: null\n                })\n            }\n            case AuthActionType.LOGIN_USER:{\n                return setAuth ({\n                    user: null,\n                    loggedIn: false,\n                    error: null\n                })\n            }\n            case AuthActionType.SET_ERR:{\n                return setAuth ({\n                    user: null,\n                    loggedIn: false,\n                    error: payload.message\n                })\n            }\n            case AuthActionType.LOGOUT_USER:{\n                return setAuth ({\n                    user: null,\n                    loggedIn: false,\n                    error: null\n                })\n            }\n            case AuthActionType.REMOVE_ERR:{\n                return setAuth ({\n                    user: null,\n                    loggedIn: false,\n                    error: null\n                })\n            }\n            default:\n                return auth;\n        }\n    }\n\n    auth.removeError = function () {\n        authReducer({\n            type: AuthActionType.REMOVE_ERR,\n            payload: {\n                loggedIn: null,\n                user: null\n            }\n        });\n    }\n\n    auth.getLoggedIn = async function () {\n        const response = await api.getLoggedIn();\n        if (response.status === 200) {\n            authReducer({\n                type: AuthActionType.GET_LOGGED_IN,\n                payload: {\n                    loggedIn: response.data.loggedIn,\n                    user: response.data.user\n                }\n            });\n        }\n    }\n\n    auth.logoutUser = async function(userData, store){\n        console.log(\"trying to logou\");\n        authReducer({\n            type: AuthActionType.LOGOUT_USER,\n            payload: {\n                user: null\n            }\n        })\n        history.push(\"/\");\n        \n    }\n\n    auth.loginUser = async function(userData, store){\n        console.log(\"Attempting to Login\");\n\n        let response;\n        let error;\n\n        try {\n            response = await api.loginUser(userData);\n        } catch (err){\n            error = err.response.data.errorMessage;\n        }\n\n        //console.log(error);\n\n        if (response){\n            if (response.status === 200) {\n                console.log(response);\n                authReducer({\n                    type: AuthActionType.REGISTER_USER,\n                    payload: {\n                    user: response.data.user\n                    }\n                })\n                history.push(\"/\");\n                store.loadIdNamePairs();\n            }\n        } else {\n            authReducer({\n                type: AuthActionType.SET_ERR,\n                payload: {\n                    message: error\n                }\n            });\n            console.log(\"Here\");\n        }\n    }\n\n    auth.registerUser = async function(userData, store) {\n        console.log(\"Trying to reegisster User\");\n        let response;\n        let error;\n\n        try {\n            response = await api.registerUser(userData);\n        } catch (err){\n            error = err.response.data.errorMessage;\n        }    \n\n        if (response){\n            if (response.status === 200) {\n                authReducer({\n                    type: AuthActionType.REGISTER_USER,\n                    payload: {\n                        user: response.data.user\n                    }\n                })\n                history.push(\"/\");\n                store.loadIdNamePairs();\n            }\n        } else {\n            authReducer({\n                type: AuthActionType.SET_ERR,\n                payload: {\n                    message: error\n                }\n            });\n            console.log(error);\n        }\n    }\n\n    return (\n        <AuthContext.Provider value={{\n            auth\n        }}>\n            {props.children}\n        </AuthContext.Provider>\n    );\n}\n\nexport default AuthContext;\nexport { AuthContextProvider };"]},"metadata":{},"sourceType":"module"}