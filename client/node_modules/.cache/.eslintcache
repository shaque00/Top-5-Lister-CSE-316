[{"/Users/ghost/Desktop/316-FinalProject/client/src/index.js":"1","/Users/ghost/Desktop/316-FinalProject/client/src/App.js":"2","/Users/ghost/Desktop/316-FinalProject/client/src/reportWebVitals.js":"3","/Users/ghost/Desktop/316-FinalProject/client/src/auth/index.js":"4","/Users/ghost/Desktop/316-FinalProject/client/src/store/index.js":"5","/Users/ghost/Desktop/316-FinalProject/client/src/components/index.js":"6","/Users/ghost/Desktop/316-FinalProject/client/src/common/jsTPS.js":"7","/Users/ghost/Desktop/316-FinalProject/client/src/components/AppBanner.js":"8","/Users/ghost/Desktop/316-FinalProject/client/src/components/EditToolbar.js":"9","/Users/ghost/Desktop/316-FinalProject/client/src/components/HomeScreen.js":"10","/Users/ghost/Desktop/316-FinalProject/client/src/transactions/MoveItem_Transaction.js":"11","/Users/ghost/Desktop/316-FinalProject/client/src/components/RegisterScreen.js":"12","/Users/ghost/Desktop/316-FinalProject/client/src/components/ListCard.js":"13","/Users/ghost/Desktop/316-FinalProject/client/src/components/SplashScreen.js":"14","/Users/ghost/Desktop/316-FinalProject/client/src/transactions/UpdateItem_Transaction.js":"15","/Users/ghost/Desktop/316-FinalProject/client/src/components/HomeWrapper.js":"16","/Users/ghost/Desktop/316-FinalProject/client/src/components/Statusbar.js":"17","/Users/ghost/Desktop/316-FinalProject/client/src/components/Top5Item.js":"18","/Users/ghost/Desktop/316-FinalProject/client/src/components/LoginScreen.js":"19","/Users/ghost/Desktop/316-FinalProject/client/src/components/WorkspaceScreen.js":"20","/Users/ghost/Desktop/316-FinalProject/client/src/components/DeleteModal.js":"21","/Users/ghost/Desktop/316-FinalProject/client/src/components/ErrorModal.js":"22","/Users/ghost/Desktop/316-FinalProject/client/src/api/index.js":"23","/Users/ghost/Desktop/316-FinalProject/client/src/components/Copyright.js":"24","/Users/ghost/Desktop/316-FinalProject/client/src/components/Community.js":"25","/Users/ghost/Desktop/316-FinalProject/client/src/components/AllLists.js":"26","/Users/ghost/Desktop/316-FinalProject/client/src/components/UserLists.js":"27","/Users/ghost/Desktop/316-FinalProject/client/src/components/ComList.js":"28"},{"size":928,"mtime":1637788529808,"results":"29","hashOfConfig":"30"},{"size":1622,"mtime":1638463675141,"results":"31","hashOfConfig":"30"},{"size":362,"mtime":1637788529809,"results":"32","hashOfConfig":"30"},{"size":5521,"mtime":1638808980091,"results":"33","hashOfConfig":"30"},{"size":27234,"mtime":1638833032998,"results":"34","hashOfConfig":"30"},{"size":1069,"mtime":1638825601329,"results":"35","hashOfConfig":"30"},{"size":6473,"mtime":1637788529805,"results":"36","hashOfConfig":"30"},{"size":11014,"mtime":1638821824553,"results":"37","hashOfConfig":"30"},{"size":1581,"mtime":1637788529806,"results":"38","hashOfConfig":"30"},{"size":3899,"mtime":1638821663603,"results":"39","hashOfConfig":"30"},{"size":703,"mtime":1637788529809,"results":"40","hashOfConfig":"30"},{"size":5902,"mtime":1638493753443,"results":"41","hashOfConfig":"30"},{"size":7513,"mtime":1638839023233,"results":"42","hashOfConfig":"30"},{"size":414,"mtime":1637933907906,"results":"43","hashOfConfig":"30"},{"size":726,"mtime":1637788529809,"results":"44","hashOfConfig":"30"},{"size":400,"mtime":1638197060925,"results":"45","hashOfConfig":"30"},{"size":1641,"mtime":1638839391650,"results":"46","hashOfConfig":"30"},{"size":4401,"mtime":1638317089393,"results":"47","hashOfConfig":"30"},{"size":3330,"mtime":1638798702444,"results":"48","hashOfConfig":"30"},{"size":9566,"mtime":1638498848874,"results":"49","hashOfConfig":"30"},{"size":1518,"mtime":1637788529806,"results":"50","hashOfConfig":"30"},{"size":1193,"mtime":1637788529806,"results":"51","hashOfConfig":"30"},{"size":1866,"mtime":1637788529804,"results":"52","hashOfConfig":"30"},{"size":452,"mtime":1637788529805,"results":"53","hashOfConfig":"30"},{"size":3369,"mtime":1638827963713,"results":"54","hashOfConfig":"30"},{"size":3358,"mtime":1638821719408,"results":"55","hashOfConfig":"30"},{"size":3180,"mtime":1638821730687,"results":"56","hashOfConfig":"30"},{"size":7577,"mtime":1638838717796,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"rdr87g",{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"60"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"60"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"60"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"60"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"60"},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"60"},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"109","messages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"113","messages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"60"},{"filePath":"116","messages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"60"},{"filePath":"119","messages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"60"},{"filePath":"122","messages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/ghost/Desktop/316-FinalProject/client/src/index.js",[],["124","125"],"/Users/ghost/Desktop/316-FinalProject/client/src/App.js",[],"/Users/ghost/Desktop/316-FinalProject/client/src/reportWebVitals.js",[],"/Users/ghost/Desktop/316-FinalProject/client/src/auth/index.js",["126","127"],"import React, { createContext, useEffect, useState } from \"react\";\nimport { useHistory } from 'react-router-dom'\nimport api from '../api'\n\nconst AuthContext = createContext();\nconsole.log(\"create AuthContext: \" + AuthContext);\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR AUTH STATE THAT CAN BE PROCESSED\nexport const AuthActionType = {\n    GET_LOGGED_IN: \"GET_LOGGED_IN\",\n    REGISTER_USER: \"REGISTER_USER\",\n    LOGIN_USER:    \"LOGIN_USER\",\n    LOGOUT_USER:   \"LOGUT_USER\",\n    SET_ERR:       \"SET_ERR\",\n    REMOVE_ERR:    \"REMOVE_ERR\"\n\n}\n\nfunction AuthContextProvider(props) {\n    const [auth, setAuth] = useState({\n        user: null,\n        loggedIn: false,\n        error: null,\n        guest: false\n    });\n    const history = useHistory();\n\n    useEffect(() => {\n        auth.getLoggedIn();\n    }, []);\n\n    const authReducer = (action) => {\n        const { type, payload } = action;\n        switch (type) {\n            case AuthActionType.GET_LOGGED_IN: {\n                return setAuth({\n                    user: payload.user,\n                    loggedIn: payload.loggedIn,\n                    error: null\n                });\n            }\n            case AuthActionType.REGISTER_USER: {\n                return setAuth({\n                    user: payload.user,\n                    loggedIn: true,\n                    error: null\n                })\n            }\n            case AuthActionType.LOGIN_USER:{\n                return setAuth ({\n                    user: payload.user,\n                    loggedIn: true,\n                    error: null\n                })\n            }\n            case AuthActionType.LOGIN_USER:{\n                return setAuth ({\n                    user: null,\n                    loggedIn: false,\n                    error: null\n                })\n            }\n            case AuthActionType.SET_ERR:{\n                return setAuth ({\n                    user: null,\n                    loggedIn: false,\n                    error: payload.message\n                })\n            }\n            case AuthActionType.LOGOUT_USER:{\n                return setAuth ({\n                    user: null,\n                    loggedIn: false,\n                    error: null\n                })\n            }\n            case AuthActionType.REMOVE_ERR:{\n                return setAuth ({\n                    user: null,\n                    loggedIn: false,\n                    error: null\n                })\n            }\n            default:\n                return auth;\n        }\n    }\n\n    auth.removeError = function () {\n        authReducer({\n            type: AuthActionType.REMOVE_ERR,\n            payload: {\n                loggedIn: null,\n                user: null\n            }\n        });\n    }\n\n    auth.getLoggedIn = async function () {\n        const response = await api.getLoggedIn();\n        if (response.status === 200) {\n            authReducer({\n                type: AuthActionType.GET_LOGGED_IN,\n                payload: {\n                    loggedIn: response.data.loggedIn,\n                    user: response.data.user\n                }\n            });\n        }\n    }\n\n    auth.logoutUser = async function(userData, store){\n        console.log(\"trying to logou\");\n        authReducer({\n            type: AuthActionType.LOGOUT_USER,\n            payload: {\n                user: null\n            }\n        })\n        history.push(\"/\");\n        \n    }\n\n    auth.loginUser = async function(userData, store){\n        console.log(\"Attempting to Login\");\n\n        let response;\n        let error;\n\n        try {\n            response = await api.loginUser(userData);\n        } catch (err){\n            error = err.response.data.errorMessage;\n        }\n\n        //console.log(error);\n\n        if (response){\n            if (response.status === 200) {\n                console.log(response);\n                authReducer({\n                    type: AuthActionType.REGISTER_USER,\n                    payload: {\n                    user: response.data.user\n                    }\n                })\n                history.push(\"/\");\n                store.loadIdNamePairs();\n                // set home here\n            }\n        } else {\n            authReducer({\n                type: AuthActionType.SET_ERR,\n                payload: {\n                    message: error\n                }\n            });\n            console.log(\"Here\");\n        }\n    }\n\n    auth.registerUser = async function(userData, store) {\n        console.log(\"Trying to reegisster User\");\n        let response;\n        let error;\n\n        try {\n            response = await api.registerUser(userData);\n        } catch (err){\n            error = err.response.data.errorMessage;\n        }    \n\n        if (response){\n            if (response.status === 200) {\n                authReducer({\n                    type: AuthActionType.REGISTER_USER,\n                    payload: {\n                        user: response.data.user\n                    }\n                })\n                history.push(\"/\");\n                store.loadIdNamePairs();\n            }\n        } else {\n            authReducer({\n                type: AuthActionType.SET_ERR,\n                payload: {\n                    message: error\n                }\n            });\n            console.log(error);\n        }\n    }\n\n    return (\n        <AuthContext.Provider value={{\n            auth\n        }}>\n            {props.children}\n        </AuthContext.Provider>\n    );\n}\n\nexport default AuthContext;\nexport { AuthContextProvider };","/Users/ghost/Desktop/316-FinalProject/client/src/store/index.js",["128","129","130"],"import { createContext, useContext, useState } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport jsTPS from '../common/jsTPS'\nimport api from '../api'\nimport MoveItem_Transaction from '../transactions/MoveItem_Transaction'\nimport UpdateItem_Transaction from '../transactions/UpdateItem_Transaction'\nimport AuthContext from '../auth'\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n\n// THIS IS THE CONTEXT WE'LL USE TO SHARE OUR STORE\nexport const GlobalStoreContext = createContext({});\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport const GlobalStoreActionType = {\n    CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n    CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n    CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n    LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n    MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\",\n    UNMARK_LIST_FOR_DELETION: \"UNMARK_LIST_FOR_DELETION\",\n    SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n    SET_ITEM_EDIT_ACTIVE: \"SET_ITEM_EDIT_ACTIVE\",\n    SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n    ADD_LIKE_DISLIKE: \"ADD_LIKE_DISLIKE\",\n    ADD_VIEW: \"ADD_VIEW\",\n    ADD_COMMENT: \"ADD_COMMENT\",\n    PUBLISH_LIST: \"PUBLISH_LIST\",\n    HOME: \"HOME\",\n    SORT_VAL: \"SORT_VAL\",\n    SORT_BY: \"SORT_BY\"\n}\n\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\nconst tps = new jsTPS();\n\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nfunction GlobalStoreContextProvider(props) {\n    // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n    const [store, setStore] = useState({\n        idNamePairs: [],\n        currentList: null,\n        newListCounter: 0,\n        listNameActive: false,\n        itemActive: false,\n        listMarkedForDeletion: null,\n        whichLists: \"\",\n        sortBy: \"\",\n        sortVal: \"\"\n    });\n    const history = useHistory();\n\n    // SINCE WE'VE WRAPPED THE STORE IN THE AUTH CONTEXT WE CAN ACCESS THE USER HERE\n    const { auth } = useContext(AuthContext);\n\n    // HERE'S THE DATA STORE'S REDUCER, IT MUST\n    // HANDLE EVERY TYPE OF STATE CHANGE\n    const storeReducer = (action) => {\n        const { type, payload } = action;\n        switch (type) {\n            // LIST UPDATE OF ITS NAME\n            case GlobalStoreActionType.CHANGE_LIST_NAME: {\n                return setStore({\n                    idNamePairs: payload.idNamePairs,\n                    currentList: payload.top5List,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null,\n                    whichLists: store.whichLists,\n                    sortBy: store.sortBy,\n                    sortVal: store.sortVal\n                });\n            }\n            // STOP EDITING THE CURRENT LIST\n            case GlobalStoreActionType.CLOSE_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null,\n                    whichLists: store.whichLists,\n                    sortBy: store.sortBy,\n                    sortVal: store.sortVal\n                })\n            }\n            // CREATE A NEW LIST\n            case GlobalStoreActionType.CREATE_NEW_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter + 1,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null,\n                    whichLists: store.whichLists,\n                    sortBy: store.sortBy,\n                    sortVal: store.sortVal\n                })\n            }\n            // GET ALL THE LISTS SO WE CAN PRESENT THEM\n            case GlobalStoreActionType.LOAD_ID_NAME_PAIRS: {\n                return setStore({\n                    idNamePairs: payload,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null,\n                    whichLists: store.whichLists,\n                    sortBy: store.sortBy,\n                    sortVal: store.sortVal\n                });\n            }\n            // PREPARE TO DELETE A LIST\n            case GlobalStoreActionType.MARK_LIST_FOR_DELETION: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: payload,\n                    whichLists: store.whichLists,\n                    sortBy: store.sortBy,\n                    sortVal: store.sortVal\n                });\n            }\n            // PREPARE TO DELETE A LIST\n            case GlobalStoreActionType.UNMARK_LIST_FOR_DELETION: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null,\n                    whichLists: store.whichLists,\n                    sortBy: store.sortBy,\n                    sortVal: store.sortVal\n                });\n            }\n            // UPDATE A LIST\n            case GlobalStoreActionType.SET_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null,\n                    whichLists: store.whichLists,\n                    sortBy: store.sortBy,\n                    sortVal: store.sortVal\n                });\n            }\n            // START EDITING A LIST ITEM\n            case GlobalStoreActionType.SET_ITEM_EDIT_ACTIVE: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: store.currentList,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    whichLists: store.whichLists,\n                    sortBy: store.sortBy,\n                    sortVal: store.sortVal\n                });\n            }\n            // START EDITING A LIST NAME\n            case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: true,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null,\n                    whichLists: store.whichLists,\n                    sortBy: store.sortBy,\n                    sortVal: store.sortVal\n                });\n            }\n\n            case GlobalStoreActionType.ADD_VIEW: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null,\n                    whichLists: store.whichLists,\n                    sortBy: store.sortBy,\n                    sortVal: store.sortVal\n                });\n            } \n\n            case GlobalStoreActionType.HOME:{\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null,\n                    whichLists: payload,\n                    sortBy: \"\",\n                    sortVal: \"\"\n                });\n            }\n\n            case GlobalStoreActionType.SORT_VAL:{\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null,\n                    whichLists: store.whichLists,\n                    sortBy: store.sortBy,\n                    sortVal: payload\n                });\n            }\n\n            case GlobalStoreActionType.SORT_BY:{\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null,\n                    whichLists: store.whichLists,\n                    sortBy: payload,\n                    sortVal: store.sortVal\n                });\n            }\n\n            default:\n                return store;\n        }\n    }\n\n    store.setLists = function(val) {\n        storeReducer({\n            type: GlobalStoreActionType.HOME,\n            payload: val\n        });\n        if (val === \"all\"){\n            history.push(\"/all-lists\");\n        } else if (val === \"users\"){\n            history.push(\"/user\");\n        } else if (val === \"com\"){\n            history.push(\"/community-lists\");\n        }\n    }\n\n    store.setSortBy = function(val){\n        storeReducer({\n            type: GlobalStoreActionType.SORT_BY,\n            payload: val\n        });\n    }\n\n    store.users = function(){\n        store.setLists(\"users\");\n    }\n\n    store.updateSortVal = function(val){\n        storeReducer({\n            type: GlobalStoreActionType.SORT_VAL,\n            payload: val\n        });\n    }\n\n    store.allLists = function(){\n        console.log(\"sadfsadfsdaf\", store.whichLists);\n        store.setLists(\"all\");\n        console.log(\"test:\", store.whichLists);\n    }\n\n    store.setHome = function(){\n        store.setLists(\"\");\n        history.push(\"/\");\n    }\n\n    store.addLike = async function(id){\n        let response = await api.getTop5ListById(id);\n        if (response.data.success) {\n            let top5List = response.data.top5List;\n            // Already likeed so return\n            if (top5List.usersL.includes(auth.user.userName)){\n                console.log(\"already liked\");\n                return;\n            } else {\n                // Check if previously disliked, if so, then remove it and decreasee dislikes\n                if (top5List.usersD.includes(auth.user.userName)){\n                    top5List.usersD.splice(top5List.usersL.indexOf(auth.user.userName), 1);\n                    top5List.dislikes--;\n                }\n\n                // add to array\n                top5List.usersL.push(auth.user.userName);\n                // increase likes\n                top5List.likes++;\n                // Update the lists\n                response = await api.updateTop5ListById(top5List._id, top5List);\n                if (response.data.success) {\n                    store.loadIdNamePairs();\n                }\n            }\n\n        }\n    }\n\n    store.addDislike = async function(id){\n        let response = await api.getTop5ListById(id);\n        if (response.data.success) {\n            let top5List = response.data.top5List;\n            // Already dislikeed so return\n            if (top5List.usersD.includes(auth.user.userName)){\n                console.log(\"already disliked\");\n                return;\n            } else {\n                // Check if previously liked, if so, then remove it and decreasee likes\n                if (top5List.usersL.includes(auth.user.userName)){\n                    top5List.usersL.splice(top5List.usersL.indexOf(auth.user.userName), 1);\n                    top5List.likes--;\n                }\n\n                // add to array\n                top5List.usersD.push(auth.user.userName);\n                // increase dislikes\n                top5List.dislikes++;\n                // Update the lists\n                response = await api.updateTop5ListById(top5List._id, top5List);\n                if (response.data.success) {\n                    store.loadIdNamePairs();\n                }\n            }\n\n        }\n    }\n    // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n    // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n    // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n    // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n    store.changeListName = async function (id, newName) {\n        let response = await api.getTop5ListById(id);\n        if (response.data.success) {\n            let top5List = response.data.top5List;\n            top5List.name = newName;\n            async function updateList(top5List) {\n                response = await api.updateTop5ListById(top5List._id, top5List);\n                if (response.data.success) {\n                    async function getListPairs(top5List) {\n                        response = await api.getTop5ListPairs();\n                        if (response.data.success) {\n                            let pairsArray = response.data.idNamePairs;\n                            storeReducer({\n                                type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                                payload: {\n                                    idNamePairs: pairsArray,\n                                    top5List: top5List\n                                }\n                            });\n                        }\n                    }\n                    getListPairs(top5List);\n                }\n            }\n            updateList(top5List);\n        }\n    }\n\n    store.saveEdit = async function(text1, text2, text3, text4, text5, title){\n        console.log(\"in save edit\");\n        store.currentList.name = title;\n        store.currentList.items[0] = text1;\n        store.currentList.items[1] = text2;\n        store.currentList.items[2] = text3;\n        store.currentList.items[3] = text4;\n        store.currentList.items[4] = text5;\n        store.updateCurrentList();\n        store.loadIdNamePairs();\n        store.closeCurrentList();\n        history.push('/');\n    }\n\n    store.community = function (){\n        store.setLists(\"com\");\n    }\n\n    store.publishList = async function(text1, text2, text3, text4, text5, title){\n        console.log(\"publish\");\n        store.currentList.date = new Date().toLocaleDateString();\n        store.saveEdit(text1, text2, text3, text4, text5, title);\n        // Check if com list of same namme exsits, if so update that list\n        // otherwise create a new com list\n        let e = store.idNamePairs.filter(e => e.userName === \"com\" && e.name.toLowerCase() === title.toLowerCase());\n            // we have founnd a communit list with the same name, nnow we just update it with itemms\n\n        if (e.length !== 0){\n            let list = e[0];\n            // update the items here\n            console.log(list.uvalues)\n\n            if (list.uitems.indexOf(text1.toLowerCase()) > -1){\n                list.uvalues[list.uitems.indexOf(text1.toLowerCase())] = list.uvalues[list.uitems.indexOf(text1.toLowerCase())] + 5;\n            } else {\n                list.uitems.push(text1.toLowerCase());\n                list.uvalues.push(5);\n            }\n\n            if (list.uitems.indexOf(text2.toLowerCase()) > -1){\n                list.uvalues[list.uitems.indexOf(text2.toLowerCase())] = list.uvalues[list.uitems.indexOf(text2.toLowerCase())] + 4;\n            } else {\n                list.uitems.push(text2.toLowerCase());\n                list.uvalues.push(4);\n            }\n\n            if (list.uitems.indexOf(text3.toLowerCase()) > -1){\n                list.uvalues[list.uitems.indexOf(text3.toLowerCase())] = list.uvalues[list.uitems.indexOf(text3.toLowerCase())] + 3;\n            } else {\n                list.uitems.push(text3.toLowerCase());\n                list.uvalues.push(3);\n            }\n\n            if (list.uitems.indexOf(text4.toLowerCase()) > -1){\n                list.uvalues[list.uitems.indexOf(text4.toLowerCase())] = list.uvalues[list.uitems.indexOf(text4.toLowerCase())] + 2;\n            } else {\n                list.uitems.push(text4.toLowerCase());\n                list.uvalues.push(2);\n            }\n\n            if (list.uitems.indexOf(text5.toLowerCase()) > -1){\n                list.uvalues[list.uitems.indexOf(text5.toLowerCase())] = list.uvalues[list.uitems.indexOf(text5.toLowerCase())] + 1;\n            } else {\n                list.uitems.push(text5.toLowerCase());\n                list.uvalues.push(1);\n            }\n\n            // Sort the items, to make it easier\n            let l2 = [];\n            for (let j = 0; j < list.uitems.length; j++) \n                l2.push({'name': list.uvalues[j], 'age': list.uitems[j]});\n            l2.sort(function(a, b) {\n                return ((a.name < b.name) ? 1 : ((a.name == b.name) ? 0 : -1));\n            });\n\n            for (let k = 0; k < list.uitems.length; k++) {\n                list.uvalues[k] = l2[k].name;\n                list.uitems[k] = l2[k].age;\n            }\n\n            const response = await api.updateTop5ListById(list._id, list);\n            if (response.data.success){\n                store.loadIdNamePairs();\n            }\n            return;\n        }\n\n        // we were not able to find a community list with that name, nnow wwe have create a new com list with that nnamme and itemss\n        let payload = {\n            name: title.toLowerCase(),\n            items: [\"\", \"\", \"\", \"\", \"\"],\n            ownerEmail: \"com\",\n            userName: \"com\",\n            likes: 0,\n            dislikes: 0,\n            views: 0,\n            date: new Date().toLocaleDateString(), \n            comments: [],\n            usersL: [],\n            usersD: [],\n            uitems: [text1, text2, text3, text4, text5],\n            uvalues: [5, 4, 3, 2, 1]\n        };\n        \n        const response = await api.createTop5List(payload);\n        if (response.data.success) {\n            console.log(\"success\");\n            tps.clearAllTransactions();\n            let newList = response.data.top5List;\n            store.loadIdNamePairs();\n        }\n\n\n    }\n\n    // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n    store.closeCurrentList = function () {\n        storeReducer({\n            type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n            payload: {}\n        });\n        \n        tps.clearAllTransactions();\n        history.push(\"/\");\n    }\n\n    // THIS FUNCTION CREATES A NEW LIST\n    store.createNewList = async function () {\n        console.log(\"In Store: \", auth.user.userName);\n        let newListName = \"Untitled\" + store.newListCounter;\n        let m = new Map();\n        let payload = {\n            name: newListName,\n            items: [\"\", \"\", \"\", \"\", \"\"],\n            ownerEmail: auth.user.email,\n            userName: auth.user.userName,\n            likes: 0,\n            dislikes: 0,\n            views: 0,\n            date: \"edit\", \n            comments: [],\n            usersL: [],\n            usersD: [],\n            uitems: [],\n            uvalues: []\n        };\n        console.log(\"success\");\n        console.log(auth.user.email);\n        const response = await api.createTop5List(payload);\n        if (response.data.success) {\n            console.log(\"success\");\n            tps.clearAllTransactions();\n            let newList = response.data.top5List;\n            storeReducer({\n                type: GlobalStoreActionType.CREATE_NEW_LIST,\n                payload: newList\n            }\n            );\n\n            // IF IT'S A VALID LIST THEN LET'S START EDITING IT\n            history.push(\"/top5list/\" + newList._id);\n        }\n        else {\n            console.log(\"API FAILED TO CREATE A NEW LIST\");\n        }\n    }\n\n    // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n    store.loadIdNamePairs = async function () {\n        const response = await api.getTop5ListPairs();\n        if (response.data.success) {\n            let pairsArray = response.data.idNamePairs;\n            console.log(pairsArray);\n            storeReducer({\n                type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n                payload: pairsArray\n            });\n        }\n        else {\n            console.log(\"API FAILED TO GET THE LIST PAIRS\");\n        }\n    }\n\n    // THE FOLLOWING 5 FUNCTIONS ARE FOR COORDINATING THE DELETION\n    // OF A LIST, WHICH INCLUDES USING A VERIFICATION MODAL. THE\n    // FUNCTIONS ARE markListForDeletion, deleteList, deleteMarkedList,\n    // showDeleteListModal, and hideDeleteListModal\n    store.markListForDeletion = async function (id) {\n        console.log(\"Trying to mark the list\");\n        // GET THE LIST\n        let response = await api.getTop5ListById(id);\n        if (response.data.success) {\n            let top5List = response.data.top5List;\n            console.log(top5List.name);\n            storeReducer({\n                type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n                payload: top5List\n            });\n        }\n    }\n\n    store.addView = async function(id){\n        console.log(\"Here\");\n        let response = await api.getTop5ListById(id);\n        if (response.data.success) {\n            let top5List = response.data.top5List;\n            console.log(top5List);\n            top5List.views = top5List.views + 1;\n            response = await api.updateTop5ListById(top5List._id, top5List);\n            if (response.data.success) {\n                store.loadIdNamePairs();\n            }\n        }\n    }\n\n    store.addComment = async function(id, comment){\n        console.log(\"In Comment\")\n        let response = await api.getTop5ListById(id);\n        if (response.data.success) {\n            let top5List = response.data.top5List;\n            console.log(top5List);\n            top5List.comments.push(auth.user.userName + \":\" + comment);\n            response = await api.updateTop5ListById(top5List._id, top5List);\n            if (response.data.success) {\n                store.loadIdNamePairs();\n            }\n        }\n    }\n\n    store.deleteList = async function (listToDelete) {\n        let response = await api.deleteTop5ListById(listToDelete._id);\n        if (response.data.success) {\n            store.loadIdNamePairs();\n            history.push(\"/\");\n        }\n    }\n\n    store.deleteMarkedList = function () {\n        store.deleteList(store.listMarkedForDeletion);\n    }\n\n    store.unmarkListForDeletion = function () {\n        storeReducer({\n            type: GlobalStoreActionType.UNMARK_LIST_FOR_DELETION,\n            payload: null\n        });\n    }\n\n    // THE FOLLOWING 8 FUNCTIONS ARE FOR COORDINATING THE UPDATING\n    // OF A LIST, WHICH INCLUDES DEALING WITH THE TRANSACTION STACK. THE\n    // FUNCTIONS ARE setCurrentList, addMoveItemTransaction, addUpdateItemTransaction,\n    // moveItem, updateItem, updateCurrentList, undo, and redo\n    store.setCurrentList = async function (id) {\n        let response = await api.getTop5ListById(id);\n        if (response.data.success) {\n            let top5List = response.data.top5List;\n\n            response = await api.updateTop5ListById(top5List._id, top5List);\n            if (response.data.success) {\n                storeReducer({\n                    type: GlobalStoreActionType.SET_CURRENT_LIST,\n                    payload: top5List\n                });\n                history.push(\"/top5list/\" + top5List._id);\n            }\n        }\n    }\n\n    store.addMoveItemTransaction = function (start, end) {\n        let transaction = new MoveItem_Transaction(store, start, end);\n        tps.addTransaction(transaction);\n    }\n\n    store.addChangeItemTransaction = function(newText, index){\n        let transaction = new UpdateItem_Transaction(store, index, store.currentList.items[index], newText);\n        tps.addTransaction(transaction);\n    }\n\n    store.addUpdateItemTransaction = function (newText, index) {\n        console.log(newText, \"Sadsf\");\n        let oldText = store.currentList.items[index];\n        let transaction = new UpdateItem_Transaction(store, index, oldText, newText);\n        tps.addTransaction(transaction);\n    }\n\n    store.moveItem = function (start, end) {\n        start -= 1;\n        end -= 1;\n        if (start < end) {\n            let temp = store.currentList.items[start];\n            for (let i = start; i < end; i++) {\n                store.currentList.items[i] = store.currentList.items[i + 1];\n            }\n            store.currentList.items[end] = temp;\n        }\n        else if (start > end) {\n            let temp = store.currentList.items[start];\n            for (let i = start; i > end; i--) {\n                store.currentList.items[i] = store.currentList.items[i - 1];\n            }\n            store.currentList.items[end] = temp;\n        }\n\n        // NOW MAKE IT OFFICIAL\n        store.updateCurrentList();\n    }\n\n    store.updateItem = function (index, newItem) {\n        store.currentList.items[index] = newItem;\n        store.updateCurrentList();\n    }\n\n    store.updateCurrentList = async function () {\n        const response = await api.updateTop5ListById(store.currentList._id, store.currentList);\n        if (response.data.success) {\n            storeReducer({\n                type: GlobalStoreActionType.SET_CURRENT_LIST,\n                payload: store.currentList\n            });\n        }\n    }\n\n    store.undo = function () {\n        tps.undoTransaction();\n    }\n\n    store.redo = function () {\n        tps.doTransaction();\n    }\n\n    store.canUndo = function() {\n        return tps.hasTransactionToUndo();\n    }\n\n    store.canRedo = function() {\n        return tps.hasTransactionToRedo();\n    }\n\n    // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n    store.setIsListNameEditActive = function () {\n        storeReducer({\n            type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n            payload: null\n        });\n    }\n\n    // THIS FUNCTION ENABLES THE PROCESS OF EDITING AN ITEM\n    store.setIsItemEditActive = function () {\n        storeReducer({\n            type: GlobalStoreActionType.SET_ITEM_EDIT_ACTIVE,\n            payload: null\n        });\n    }\n\n    return (\n        <GlobalStoreContext.Provider value={{\n            store\n        }}>\n            {props.children}\n        </GlobalStoreContext.Provider>\n    );\n}\n\nexport default GlobalStoreContext;\nexport { GlobalStoreContextProvider };","/Users/ghost/Desktop/316-FinalProject/client/src/components/index.js",[],"/Users/ghost/Desktop/316-FinalProject/client/src/common/jsTPS.js",[],"/Users/ghost/Desktop/316-FinalProject/client/src/components/AppBanner.js",["131","132"],"import { useContext, useState } from 'react';\nimport { Link } from 'react-router-dom'\nimport AuthContext from '../auth';\nimport { GlobalStoreContext } from '../store'\nimport EditToolbar from './EditToolbar'\nimport AppBar from '@mui/material/AppBar';\nimport Box from '@mui/material/Box';\nimport Toolbar from '@mui/material/Toolbar';\nimport IconButton from '@mui/material/IconButton';\nimport Typography from '@mui/material/Typography';\nimport MenuItem from '@mui/material/MenuItem';\nimport Menu from '@mui/material/Menu';\nimport AccountCircle from '@mui/icons-material/AccountCircle';\nimport HomeIcon from '@mui/icons-material/Home';\nimport PersonIcon from '@mui/icons-material/Person';\nimport PeopleIcon from '@mui/icons-material/People';\nimport FunctionsIcon from '@mui/icons-material/Functions';\nimport SortIcon from '@mui/icons-material/Sort';\nimport TextField from '@mui/material/TextField';\n\nexport default function AppBanner() {\n    const { auth } = useContext(AuthContext);\n    const { store } = useContext(GlobalStoreContext);\n    const [anchorEl, setAnchorEl] = useState(null);\n    const [anchorEl2, setAnchorEl2] = useState(null);\n    const [criteria, setCriteria] = useState(\"\");\n    const isMenuOpen = Boolean(anchorEl);\n    const isMenuOpen2 = Boolean(anchorEl2);\n\n    const handleProfileMenuOpen = (event) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleProfileMenuOpen2 = (event) => {\n        console.log(\"here\");\n        setAnchorEl2(event.currentTarget);\n    };\n\n    function updateCriteria(event){\n        console.log(event.target.value);\n        if (store.whichLists !== \"users\"){\n            store.updateSortVal(event.target.value);\n        } else {\n            setCriteria(event.target.value);\n        }\n    }\n\n    function userSelection(event){\n        if (event.code === \"Enter\"){\n            store.updateSortVal(criteria);\n        }\n    }\n\n    const handleMenuClose = () => {\n        setAnchorEl(null);\n        setAnchorEl2(null);\n    };\n\n    const handleLogout = () => {\n        handleMenuClose();\n        store.setHome();\n        auth.logoutUser();\n    }\n\n    const handleCreateNewList = () => {\n        console.log(\"Trying to crreaete a new list\");\n        store.createNewList();\n    }\n\n    const menuId = 'primary-search-account-menu';\n    const loggedOutMenu = (\n        <Menu\n            anchorEl={anchorEl}\n            anchorOrigin={{\n                vertical: 'top',\n                horizontal: 'right',\n            }}\n            id={menuId}\n            keepMounted\n            transformOrigin={{\n                vertical: 'top',\n                horizontal: 'right',\n            }}\n            open={isMenuOpen}\n            onClose={handleMenuClose}\n        >\n            <MenuItem onClick={handleMenuClose}><Link to='/register/'>Create New Account</Link></MenuItem>\n            <MenuItem onClick={handleMenuClose}><Link to='/login/'>Login</Link></MenuItem>\n            <MenuItem onClick={handleMenuClose}><Link to='/all-lists/'>Guest</Link></MenuItem>\n        </Menu>\n    );\n    const loggedInMenu = \n        <Menu\n            anchorEl={anchorEl}\n            anchorOrigin={{\n                vertical: 'top',\n                horizontal: 'right',\n            }}\n            id={menuId}\n            keepMounted\n            transformOrigin={{\n                vertical: 'top',\n                horizontal: 'right',\n            }}\n            open={isMenuOpen}\n            onClose={handleMenuClose}\n        >\n            <MenuItem onClick={handleLogout}>Logout</MenuItem>\n        </Menu>\n        \n    const sortMenu = \n    <Menu\n            anchorEl={anchorEl2}\n            anchorOrigin={{\n                vertical: 'top',\n                horizontal: 'right',\n            }}\n            id={menuId}\n            keepMounted\n            transformOrigin={{\n                vertical: 'top',\n                horizontal: 'right',\n            }}\n            open={isMenuOpen2}\n            onClose={handleMenuClose}\n        >\n            <MenuItem onClick={sortDateN}>Publish Date (Newest)</MenuItem>\n            <MenuItem onClick={sortDateO}>Publish Date (Oldest)</MenuItem>\n            <MenuItem onClick={sortView}>Views</MenuItem>\n            <MenuItem onClick={sortLike}>Likes</MenuItem>\n            <MenuItem onClick={sortDislike}>Dislikes</MenuItem>\n        </Menu>\n\n    function sortDateN() {\n        store.setSortBy(\"dn\");\n        handleMenuClose();\n    }\n\n    function sortDateO() {\n        store.setSortBy(\"do\");\n        handleMenuClose();\n    }\n\n    function sortView() {\n        store.setSortBy(\"v\");\n        handleMenuClose();\n    }\n\n    function sortDislike() {\n        store.setSortBy(\"d\");\n        handleMenuClose();\n    }\n\n    function sortLike() {\n        store.setSortBy(\"l\");\n        handleMenuClose();\n    }\n\n    function goToCommunity(){\n        store.community();\n    }\n\n\n    let editToolbar = \"\";\n    let menu = loggedOutMenu;\n    if (auth.loggedIn) {\n        menu = loggedInMenu;\n    }\n    \n    function getAccountMenu(loggedIn) {\n        if (loggedIn){\n            let initial = auth.user.firstName.charAt(0).toUpperCase() + '' + auth.user.lastName.charAt(0).toUpperCase();\n            return initial;\n        }\n            \n        return <AccountCircle />;\n    }\n\n    function goToAllLists(){\n        store.allLists();\n    }\n\n    function goToHome(){\n        store.setHome();\n    }\n\n    function goToUsers(){\n        store.users();\n    }\n\n    let tBar = \"\";\n    if (auth.loggedIn){\n        tBar = \n        <AppBar position=\"static\" style={{ background: 'white' }}>\n                    <Toolbar>\n                        <Box sx={{ display: { xs: 'none', md: 'flex' } }}>\n                            <IconButton\n                                size=\"large\"\n                                edge=\"start\"\n                                aria-label=\"account of current user\"\n                                aria-controls={menuId}\n                                aria-haspopup=\"true\"\n                                onClick={goToHome}\n                                color=\"inherit\"\n                                disabled={auth.guest}\n                            >\n                                <HomeIcon style = {{fontSize: \"45px\", color: \"black\" }}/>\n                            </IconButton>\n                            <IconButton\n                                size=\"large\"\n                                edge=\"start\"\n                                aria-label=\"account of current user\"\n                                aria-controls={menuId}\n                                aria-haspopup=\"true\"\n                                color=\"inherit\"\n                                onClick={goToAllLists}\n                            >\n                                <PeopleIcon style = {{fontSize: \"45px\", color: \"black\"  }}/>\n                            </IconButton>\n                            <IconButton\n                                size=\"large\"\n                                edge=\"start\"\n                                aria-label=\"account of current user\"\n                                aria-controls={menuId}\n                                aria-haspopup=\"true\"\n                                onClick={goToUsers}\n                                color=\"inherit\"\n                            >\n                                <PersonIcon style = {{fontSize: \"45px\", color: \"black\"  }}/>\n                            </IconButton>\n                            <IconButton\n                                size=\"large\"\n                                edge=\"start\"\n                                aria-label=\"account of current user\"\n                                aria-controls={menuId}\n                                aria-haspopup=\"true\"\n                                onClick={goToCommunity}\n                                color=\"inherit\"\n                            >\n                                <FunctionsIcon style = {{fontSize: \"45px\", color: \"black\"  }}/>\n                            </IconButton>\n                        </Box>\n                        <TextField onKeyPress={userSelection} onChange={updateCriteria} sx={{ flexGrow: 1 }} id=\"outlined-basic\" variant=\"outlined\" />\n                        <Box sx={{ display: { xs: 'none', md: 'flex' } }}>\n                        <IconButton\n                                size=\"large\"\n                                edge=\"end\"\n                                aria-label=\"account of current user\"\n                                aria-controls={menuId}\n                                aria-haspopup=\"true\"\n                                onClick={handleProfileMenuOpen2}\n                                color=\"inherit\"\n                            >\n                                <Typography\n                                    variant=\"h6\"\n                                    noWrap\n                                    component=\"div\"\n                                    sx={{ display: { xs: 'none', sm: 'block' } }}\n                                    style = {{color: \"black\"}}  \n                                > \n                                    Sort By  \n                                </Typography>\n                                <SortIcon style = {{fontSize: \"45px\", color: \"black\"  }}/>\n                            </IconButton>\n                        </Box>\n                    </Toolbar>\n                </AppBar>\n    }\n\n    return (\n        <Box>\n            <Box sx={{ flexGrow: 1 }}>\n                <AppBar position=\"static\" style={{ background: '#35405f' }}>\n                    <Toolbar>\n                        <Typography                        \n                            variant=\"h4\"\n                            noWrap\n                            component=\"div\"\n                            sx={{ display: { xs: 'none', sm: 'block' } }}                        \n                        >\n                            <Link style={{ textDecoration: 'none', color: 'white' }} to='/'>T<sup>5</sup>L</Link>\n                        </Typography>\n                        <Box sx={{ flexGrow: 1 }}>{editToolbar}</Box>\n                        <Box sx={{ display: { xs: 'none', md: 'flex' } }}>\n                            <IconButton\n                                size=\"large\"\n                                edge=\"end\"\n                                aria-label=\"account of current user\"\n                                aria-controls={menuId}\n                                aria-haspopup=\"true\"\n                                onClick={handleProfileMenuOpen}\n                                color=\"inherit\"\n                            >\n                                { getAccountMenu(auth.loggedIn) }\n                            </IconButton>\n                        </Box>\n                    </Toolbar>\n                </AppBar>\n                {\n                    menu\n                }\n                {\n                    sortMenu\n                }\n            </Box>\n            <Box sx={{ flexGrow: 1 }}>{tBar}</Box>\n        </Box>\n    );\n}","/Users/ghost/Desktop/316-FinalProject/client/src/components/EditToolbar.js",[],"/Users/ghost/Desktop/316-FinalProject/client/src/components/HomeScreen.js",["133","134","135","136","137","138","139","140","141","142"],"import React, { useContext, useEffect } from 'react'\nimport { GlobalStoreContext } from '../store'\nimport ListCard from './ListCard.js'\nimport { Fab, Typography } from '@mui/material'\nimport AddIcon from '@mui/icons-material/Add';\nimport List from '@mui/material/List';\nimport AuthContext from '../auth'\nimport DeleteModal from './DeleteModal'\nimport Divider from '@mui/material/Divider';\nimport IconButton from '@mui/material/IconButton';\nimport { Grid } from '@mui/material';\nimport { Paper } from '@mui/material';\n/*\n    This React component lists all the top5 lists in the UI.\n    \n    @author McKilla Gorilla\n*/\nconst HomeScreen = () => {\n    const { store } = useContext(GlobalStoreContext);\n    const { auth } = useContext(AuthContext);\n\n    useEffect(() => {\n        store.loadIdNamePairs();\n    }, []);\n\n    function handleCreateNewList() {\n        console.log(\"Asd\");\n        store.createNewList();\n    }\n    let listCard = \"\";\n    console.log(\"ssort by val\", store.sortBy);\n    if (store) {\n        listCard = \n            <Grid container spacing={1} direction=\"row\" sx={{pl:3}}>\n                {\n                store.idNamePairs.filter(pair => pair.email === auth.user.email && pair.userName !== \"com\")\n                    .filter(pair => pair.name.toLowerCase().startsWith(store.sortVal.toLowerCase())).sort(function(l1, l2){\n                        if (store.sortBy === \"l\"){\n                            return l2.likes - l1.likes;\n                        }\n                        if (store.sortBy === \"d\"){\n                            return l2.dislikes - l1.dislikes;\n                        }\n                        if (store.sortBy === \"v\"){\n                            return l2.views - l1.views;\n                        }\n                        if (store.sortBy === \"do\"){\n                            if (l1.date === \"edit\" && l2.date !== \"edit\"){\n                                return 1;\n                            }\n\n                            if (l2.date === \"edit\" && l1.date !== \"edit\"){\n                                return -1;\n                            }\n\n                            if (l1.date === \"edit\" && l2.date === \"edit\"){\n                                return 1;\n                            }\n\n                            return new Date(l2.date) - new Date(l1.date);\n\n                        }if (store.sortBy === \"dn\"){\n                            if (l1.date === \"edit\" && l2.date !== \"edit\"){\n                                return 1;\n                            }\n\n                            if (l2.date === \"edit\" && l1.date !== \"edit\"){\n                                return -1;\n                            }\n\n                            if (l1.date === \"edit\" && l2.date === \"edit\"){\n                                return 1;\n                            }\n\n                            return new Date(l1.date) - new Date(l2.date);\n                        }\n                    }).map((pair) => (\n                    <ListCard\n                        key={pair._id}\n                        idNamePair={pair}\n                        selected={false}\n                    />\n                ))\n            }\n            </Grid>\n            /*<List sx={{top: '1%', width: '90%', left: '5%', bgcolor: 'background.paper' }}>\n            {\n                store.idNamePairs.filter(pair => pair.email === auth.user.email).map((pair) => (\n                    <ListCard\n                        key={pair._id}\n                        idNamePair={pair}\n                        selected={false}\n                    />\n                ))\n            }\n            <Divider />\n            </List>;*/\n    }\n    return (\n        <div id=\"top5-list-selector\">\n            <div id=\"list-selector-list\">\n                {\n                    listCard\n                }\n            </div>\n            <DeleteModal />\n        </div>)\n}\n\nexport default HomeScreen;","/Users/ghost/Desktop/316-FinalProject/client/src/transactions/MoveItem_Transaction.js",[],"/Users/ghost/Desktop/316-FinalProject/client/src/components/RegisterScreen.js",[],"/Users/ghost/Desktop/316-FinalProject/client/src/components/ListCard.js",["143","144","145","146","147","148"],"/Users/ghost/Desktop/316-FinalProject/client/src/components/SplashScreen.js",[],"/Users/ghost/Desktop/316-FinalProject/client/src/transactions/UpdateItem_Transaction.js",[],"/Users/ghost/Desktop/316-FinalProject/client/src/components/HomeWrapper.js",[],"/Users/ghost/Desktop/316-FinalProject/client/src/components/Statusbar.js",["149","150","151"],"/Users/ghost/Desktop/316-FinalProject/client/src/components/Top5Item.js",[],"/Users/ghost/Desktop/316-FinalProject/client/src/components/LoginScreen.js",["152"],"import * as React from 'react';\nimport { useContext } from 'react';\nimport Avatar from '@mui/material/Avatar';\nimport Button from '@mui/material/Button';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport TextField from '@mui/material/TextField';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport Checkbox from '@mui/material/Checkbox';\nimport Link from '@mui/material/Link';\nimport Paper from '@mui/material/Paper';\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\nimport LockOutlinedIcon from '@mui/icons-material/LockOutlined';\nimport Typography from '@mui/material/Typography';\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\nimport { ErrorModal } from '.';\n\nimport AuthContext from '../auth'\nimport Copyright from './Copyright'\nimport { GlobalStoreContext } from '../store'\nimport { Container } from '@mui/material';\n\nconst theme = createTheme();\n\nexport default function LoginScreen() {\n    const { auth } = useContext(AuthContext);\n    const { store } = useContext(GlobalStoreContext)\n\n    const handleSubmit = (event) => {\n    event.preventDefault();\n    const formData = new FormData(event.currentTarget);\n    \n    auth.loginUser({\n        userName: formData.get('userName'),\n        password: formData.get('password')\n    }, store);\n  };\n\n  return (\n    <ThemeProvider theme={theme}>\n      <ErrorModal />\n      <Container component=\"main\" maxWidth=\"xs\">\n        <CssBaseline />\n        <Box\n          sx={{\n            marginTop: 8,\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n          }}\n        >\n          <Avatar sx={{ m: 1, bgcolor: 'secondary.main' }}>\n            <LockOutlinedIcon />\n          </Avatar>\n          <Typography component=\"h1\" variant=\"h5\">\n            Sign in\n          </Typography>\n          <Box component=\"form\" onSubmit={handleSubmit} noValidate sx={{ mt: 1 }}>\n            <TextField\n              margin=\"normal\"\n              required\n              fullWidth\n              id=\"userName\"\n              label=\"User Name\"\n              name=\"userName\"\n              autoComplete=\"userName\"\n              autoFocus\n            />\n            <TextField\n              margin=\"normal\"\n              required\n              fullWidth\n              name=\"password\"\n              label=\"Password\"\n              type=\"password\"\n              id=\"password\"\n              autoComplete=\"current-password\"\n            />\n            <FormControlLabel\n              control={<Checkbox value=\"remember\" color=\"primary\" />}\n              label=\"Remember me\"\n            />\n            <Button\n              type=\"submit\"\n              fullWidth\n              variant=\"contained\"\n              sx={{ mt: 3, mb: 2 }}\n            >\n              Sign In\n            </Button>\n            <Grid container>\n              <Grid item xs>\n                <Link href=\"#\" variant=\"body2\">\n                  Forgot password?\n                </Link>\n              </Grid>\n              <Grid item>\n                <Link href=\"#\" variant=\"body2\">\n                  {\"Don't have an account? Sign Up\"}\n                </Link>\n              </Grid>\n            </Grid>\n          </Box>\n        </Box>\n        <Copyright sx={{ mt: 8, mb: 4 }} />\n      </Container>\n    </ThemeProvider>\n  );\n}","/Users/ghost/Desktop/316-FinalProject/client/src/components/WorkspaceScreen.js",["153","154","155"],"import { useContext, useState } from 'react'\nimport Top5Item from './Top5Item.js'\nimport List from '@mui/material/List';\nimport { ListItem, Typography } from '@mui/material'\nimport { GlobalStoreContext } from '../store/index.js'\nimport { useParams } from 'react-router-dom'\nimport AuthContext from '../auth'\nimport { TextField } from '@mui/material';\nimport { Box } from '@mui/system';\nimport { Grid } from '@mui/material';\nimport { Button } from '@mui/material';\n/*\n    This React component lets us edit a loaded list, which only\n    happens when we are on the proper route.\n    \n    @author McKilla Gorilla\n*/\nfunction WorkspaceScreen() {\n    const { store } = useContext(GlobalStoreContext);\n    const { auth } = useContext(AuthContext);\n    let {id} = useParams();\n    console.log(id);\n\n    const [text1, setText1] = useState(store.currentList.items[0]);\n    const [text2, setText2] = useState(store.currentList.items[1]);\n    const [text3, setText3] = useState(store.currentList.items[2]);\n    const [text4, setText4] = useState(store.currentList.items[3]);\n    const [text5, setText5] = useState(store.currentList.items[4]);\n    const [title, setTitle] = useState(store.currentList.name);\n\n    function handleUpdateText1(event) {\n        console.log(event.target.value);\n        setText1(event.target.value);\n    }\n\n    function handleUpdateText2(event) {\n        console.log(event.target.value);\n        setText2(event.target.value);\n    }\n\n    function handleUpdateText3(event) {\n        console.log(event.target.value);\n        setText3(event.target.value);\n    }\n\n    function handleUpdateText4(event) {\n        console.log(event.target.value);\n        setText4(event.target.value);\n    }\n\n    function handleUpdateText5(event) {\n        console.log(event.target.value);\n        setText5(event.target.value);\n    }\n\n    function handleTitle(event){\n        console.log(event.target.value);\n        setTitle(event.target.value);\n    }\n\n    function readyForPublish(){\n        // Check if items and title all have names and are not empty\n        if (text1 === \"\" || text2 === \"\" || text3 === \"\" || text4 === \"\" || text5 === \"\" || title === \"\"){\n            return true;\n        }\n\n        let s = new Set();\n        s.add(text1.toLowerCase());\n        s.add(text2.toLowerCase());\n        s.add(text3.toLowerCase());\n        s.add(text4.toLowerCase());\n        s.add(text5.toLowerCase());\n        if (s.size !== 5){\n            return true;\n        }\n\n        // Now check if the title name isnt the same as a published title\n        let a = store.idNamePairs.filter(list => list.email === auth.user.email).filter(list => list.date !== \"edit\").filter(list => list.name === title);\n        console.log(a);\n        if (a.length !== 0){\n            return true;\n        }\n\n        return false;\n    }\n\n    function save(){\n        store.saveEdit(text1, text2, text3, text4, text5, title);\n    }\n\n    function publish(){\n        console.log(\"local\");\n        store.publishList(text1, text2, text3, text4, text5, title);\n    }\n\n    if (!store.idNamePairs){\n        auth.logoutUser(\"\",\"\");\n    }\n\n    let a = store.idNamePairs.filter(e => e._id === id);\n    if (!a){\n        auth.logoutUser(\"\",\"\");\n    }\n\n    let editItems = \n            /*<List id=\"edit-items\" sx={{ width: '100%', bgcolor: 'background.paper' }}>\n                {\n                    store.currentList.items.map((item, index) => (\n                        <Top5Item \n                            key={'top5-item-' + (index+1)}\n                            text={item}\n                            index={index} \n                        />\n                    ))\n                }\n            </List>;*/\n            <List id=\"edit-items\" sx={{ width: '100%', bgcolor: 'background.paper' }} style={{backgroundColor: \"darkblue\"}}>\n                <ListItem className=\"top5-item\" sx={{ display: 'flex', p: 1 }} style={{ ontSize: '48pt', width: '100%' }}>\n                    <TextField sx={{ p: 0 }}\n                        defaultValue={store.currentList.items[0]}\n                        style={{backgroundColor: \"gold\"}}\n                        margin=\"normal\"\n                        required\n                        fullWidth\n                        name=\"name\"\n                        autoComplete=\"Top 5 Item Name\"\n                        className='list-card'\n                        inputProps={{style: {fontSize: 30}}}\n                        InputLabelProps={{style: {fontSize: 24}}}\n                        autoFocus\n                        onChange={handleUpdateText1}\n                    ></TextField>\n                </ListItem>\n\n                <ListItem className=\"top5-item\" sx={{ display: 'flex', p: 1 }} style={{ ontSize: '48pt', width: '100%' }}>\n                    <TextField sx={{ p: 0 }}\n                        style={{backgroundColor: \"gold\"}}\n                        defaultValue={store.currentList.items[1]}\n                        margin=\"normal\"\n                        required\n                        fullWidth\n                        name=\"name\"\n                        autoComplete=\"Top 5 Item Name\"\n                        className='list-card'\n                        inputProps={{style: {fontSize: 30}}}\n                        InputLabelProps={{style: {fontSize: 24}}}\n                        autoFocus\n                        onChange={handleUpdateText2}\n                    ></TextField>\n                </ListItem>\n\n                <ListItem className=\"top5-item\" sx={{ display: 'flex', p: 1 }} style={{ ontSize: '48pt', width: '100%' }}>\n                    <TextField sx={{ p: 0 }}\n                        style={{backgroundColor: \"gold\"}}\n                        defaultValue={store.currentList.items[2]}\n                        margin=\"normal\"\n                        required\n                        fullWidth\n                        name=\"name\"\n                        autoComplete=\"Top 5 Item Name\"\n                        className='list-card'\n                        inputProps={{style: {fontSize: 30}}}\n                        InputLabelProps={{style: {fontSize: 24}}}\n                        autoFocus\n                        onChange={handleUpdateText3}\n                    ></TextField>\n                </ListItem>\n\n                <ListItem className=\"top5-item\" sx={{ display: 'flex', p: 1 }} style={{ ontSize: '48pt', width: '100%' }}>\n                    <TextField sx={{ p: 0 }}\n                        style={{backgroundColor: \"gold\"}}\n                        defaultValue={store.currentList.items[3]}\n                        margin=\"normal\"\n                        required\n                        fullWidth\n                        name=\"name\"\n                        autoComplete=\"Top 5 Item Name\"\n                        className='list-card'\n                        inputProps={{style: {fontSize: 30}}}\n                        InputLabelProps={{style: {fontSize: 24}}}\n                        autoFocus\n                        onChange={handleUpdateText4}\n                    ></TextField>\n                </ListItem>\n\n                <ListItem className=\"top5-item\" sx={{ display: 'flex', p: 1 }} style={{ ontSize: '48pt', width: '100%' }}>\n                    <TextField sx={{ p: 0 }}\n                        style={{backgroundColor: \"gold\"}}\n                        defaultValue={store.currentList.items[4]}\n                        margin=\"normal\"\n                        required\n                        fullWidth\n                        name=\"name\"\n                        autoComplete=\"Top 5 Item Name\"\n                        className='list-card'\n                        inputProps={{style: {fontSize: 30}}}\n                        InputLabelProps={{style: {fontSize: 24}}}\n                        autoFocus\n                        onChange={handleUpdateText5}\n                    ></TextField>\n                </ListItem>\n                <Button onClick={save} variant=\"contained\" style={{left:'80%', color:\"black\", backgroundColor:\"white\"}}>\n                    Save\n                </Button>\n                <Button onClick={publish} disabled={readyForPublish()} variant=\"contained\" style={{left:'85%', color:\"black\", backgroundColor:\"white\"}}>\n                    Publish\n                </Button>\n            </List>\n\n    return (\n        <div id=\"top5-workspace\">\n            <TextField onChange={handleTitle} defaultValue={store.currentList.name} style={{backgroundColor: \"white\", width:'50%'}} sx={{p:1}} margin=\"none\">\n            </TextField>\n            <div id=\"workspace-edit\">\n                <div id=\"edit-numbering\">\n                    <div className=\"item-number\"><Typography sx={{p:0, pl:10, pr:10, borderRadius: 5}} style={{backgroundColor:\"gold\"}} variant=\"h3\">1.</Typography></div>\n                    <div className=\"item-number\"><Typography sx={{p:0, pl:10, pr:10, borderRadius: 5}} style={{backgroundColor:\"gold\"}} variant=\"h3\">2.</Typography></div>\n                    <div className=\"item-number\"><Typography sx={{p:0, pl:10, pr:10, borderRadius: 5}} style={{backgroundColor:\"gold\"}} variant=\"h3\">3.</Typography></div>\n                    <div className=\"item-number\"><Typography sx={{p:0, pl:10, pr:10, borderRadius: 5}} style={{backgroundColor:\"gold\"}} variant=\"h3\">4.</Typography></div>\n                    <div className=\"item-number\"><Typography sx={{p:0, pl:10, pr:10, borderRadius: 5}} style={{backgroundColor:\"gold\"}} variant=\"h3\">5.</Typography></div>\n                </div>\n                {editItems}\n                \n            </div>\n        </div>\n    )\n}\n\nexport default WorkspaceScreen;","/Users/ghost/Desktop/316-FinalProject/client/src/components/DeleteModal.js",[],"/Users/ghost/Desktop/316-FinalProject/client/src/components/ErrorModal.js",[],"/Users/ghost/Desktop/316-FinalProject/client/src/api/index.js",[],"/Users/ghost/Desktop/316-FinalProject/client/src/components/Copyright.js",[],"/Users/ghost/Desktop/316-FinalProject/client/src/components/Community.js",["156","157","158","159","160","161","162","163","164","165","166"],"import React, { useContext, useEffect } from 'react'\nimport { GlobalStoreContext } from '../store'\nimport ListCard from './ListCard.js'\nimport { Fab, stepperClasses, Typography } from '@mui/material'\nimport AddIcon from '@mui/icons-material/Add';\nimport List from '@mui/material/List';\nimport AuthContext from '../auth'\nimport DeleteModal from './DeleteModal'\nimport Divider from '@mui/material/Divider';\nimport IconButton from '@mui/material/IconButton';\nimport { Grid } from '@mui/material';\nimport  ComList from './ComList';\n/*\n    This React component lists all the top5 lists in the UI.\n    \n    @author McKilla Gorilla\n*/\nconst Community = () => {\n    const { store } = useContext(GlobalStoreContext);\n    const { auth } = useContext(AuthContext);\n\n    useEffect(() => {\n        store.loadIdNamePairs();\n    }, []);\n    //console.log(\"all lists, \", store.sortVal);\n\n    let listCard = \"\";\n    //console.log(store.idNamePairs);\n    if (store) {\n        listCard = \n            <Grid container spacing={1} direction=\"row\" sx={{pl:3}}>\n            {\n                store.idNamePairs\n                    .filter(pair => pair.name.toLowerCase().startsWith(store.sortVal.toLowerCase())).filter(pair => pair.userName === \"com\").sort(function(l1, l2){\n                        if (store.sortBy === \"l\"){\n                            return l2.likes - l1.likes;\n                        }\n                        if (store.sortBy === \"d\"){\n                            return l2.dislikes - l1.dislikes;\n                        }\n                        if (store.sortBy === \"v\"){\n                            return l2.views - l1.views;\n                        }\n                        if (store.sortBy === \"do\"){\n                            if (l1.date === \"edit\" && l2.date !== \"edit\"){\n                                return 1;\n                            }\n\n                            if (l2.date === \"edit\" && l1.date !== \"edit\"){\n                                return -1;\n                            }\n\n                            if (l1.date === \"edit\" && l2.date === \"edit\"){\n                                return 1;\n                            }\n\n                            return new Date(l2.date) - new Date(l1.date);\n\n                        }if (store.sortBy === \"dn\"){\n                            if (l1.date === \"edit\" && l2.date !== \"edit\"){\n                                return 1;\n                            }\n\n                            if (l2.date === \"edit\" && l1.date !== \"edit\"){\n                                return -1;\n                            }\n\n                            if (l1.date === \"edit\" && l2.date === \"edit\"){\n                                return 1;\n                            }\n\n                            return new Date(l1.date) - new Date(l2.date);\n                        }\n                    })\n                    .map((pair) => (\n                    <ComList\n                        key={pair._id}\n                        idNamePair={pair}\n                        selected={false}\n                    />\n                ))\n            }\n            </Grid>;\n    }\n    return (\n        <div id=\"top5-list-selector\">\n            <div id=\"list-selector-list\">\n                {\n                    listCard\n                }\n            </div>\n            <DeleteModal />\n        </div>)\n}\n\nexport default Community;","/Users/ghost/Desktop/316-FinalProject/client/src/components/AllLists.js",["167","168","169","170","171","172","173","174","175","176"],"import React, { useContext, useEffect } from 'react'\nimport { GlobalStoreContext } from '../store'\nimport ListCard from './ListCard.js'\nimport { Fab, stepperClasses, Typography } from '@mui/material'\nimport AddIcon from '@mui/icons-material/Add';\nimport List from '@mui/material/List';\nimport AuthContext from '../auth'\nimport DeleteModal from './DeleteModal'\nimport Divider from '@mui/material/Divider';\nimport IconButton from '@mui/material/IconButton';\nimport { Grid } from '@mui/material';\n/*\n    This React component lists all the top5 lists in the UI.\n    \n    @author McKilla Gorilla\n*/\nconst AllLists = () => {\n    const { store } = useContext(GlobalStoreContext);\n    const { auth } = useContext(AuthContext);\n\n    useEffect(() => {\n        store.loadIdNamePairs();\n    }, []);\n    //console.log(\"all lists, \", store.sortVal);\n\n    let listCard = \"\";\n    //console.log(store.idNamePairs);\n    if (store) {\n        listCard = \n            <Grid container spacing={1} direction=\"row\" sx={{pl:3}}>\n            {\n                store.idNamePairs.filter(pair => pair.date !== \"edit\" && pair.userName !== \"com\")\n                    .filter(pair => pair.name.toLowerCase().startsWith(store.sortVal.toLowerCase())).sort(function(l1, l2){\n                        if (store.sortBy === \"l\"){\n                            return l2.likes - l1.likes;\n                        }\n                        if (store.sortBy === \"d\"){\n                            return l2.dislikes - l1.dislikes;\n                        }\n                        if (store.sortBy === \"v\"){\n                            return l2.views - l1.views;\n                        }\n                        if (store.sortBy === \"do\"){\n                            if (l1.date === \"edit\" && l2.date !== \"edit\"){\n                                return 1;\n                            }\n\n                            if (l2.date === \"edit\" && l1.date !== \"edit\"){\n                                return -1;\n                            }\n\n                            if (l1.date === \"edit\" && l2.date === \"edit\"){\n                                return 1;\n                            }\n\n                            return new Date(l2.date) - new Date(l1.date);\n\n                        }if (store.sortBy === \"dn\"){\n                            if (l1.date === \"edit\" && l2.date !== \"edit\"){\n                                return 1;\n                            }\n\n                            if (l2.date === \"edit\" && l1.date !== \"edit\"){\n                                return -1;\n                            }\n\n                            if (l1.date === \"edit\" && l2.date === \"edit\"){\n                                return 1;\n                            }\n\n                            return new Date(l1.date) - new Date(l2.date);\n                        }\n                    })\n                    .map((pair) => (\n                    <ListCard\n                        key={pair._id}\n                        idNamePair={pair}\n                        selected={false}\n                    />\n                ))\n            }\n            </Grid>;\n    }\n    return (\n        <div id=\"top5-list-selector\">\n            <div id=\"list-selector-list\">\n                {\n                    listCard\n                }\n            </div>\n            <DeleteModal />\n        </div>)\n}\n\nexport default AllLists;","/Users/ghost/Desktop/316-FinalProject/client/src/components/UserLists.js",["177","178","179","180","181","182","183","184","185"],"import React, { useContext, useEffect } from 'react'\nimport { GlobalStoreContext } from '../store'\nimport ListCard from './ListCard.js'\nimport { Fab, Typography } from '@mui/material'\nimport AddIcon from '@mui/icons-material/Add';\nimport List from '@mui/material/List';\nimport AuthContext from '../auth'\nimport DeleteModal from './DeleteModal'\nimport Divider from '@mui/material/Divider';\nimport IconButton from '@mui/material/IconButton';\nimport { Grid } from '@mui/material';\n/*\n    This React component lists all the top5 lists in the UI.\n    \n    @author McKilla Gorilla\n*/\nconst UserLists = () => {\n    const { store } = useContext(GlobalStoreContext);\n    const { auth } = useContext(AuthContext);\n\n    useEffect(() => {\n        store.loadIdNamePairs();\n    }, []);\n    console.log(\"all lists, \", store.sortVal);\n\n    let listCard = \"\";\n    console.log(store.idNamePairs);\n    if (store && store.sortVal !== \"\") {\n        listCard = \n            <Grid container spacing={1} direction=\"row\" sx={{pl:3}}>\n            {\n                store.idNamePairs.filter(pair => pair.userName === store.sortVal).filter(pair => pair.date !== \"edit\" && pair.userName !== \"com\").sort(function(l1, l2){\n                    if (store.sortBy === \"l\"){\n                        return l2.likes - l1.likes;\n                    }\n                    if (store.sortBy === \"d\"){\n                        return l2.dislikes - l1.dislikes;\n                    }\n                    if (store.sortBy === \"v\"){\n                        return l2.views - l1.views;\n                    }\n                    if (store.sortBy === \"do\"){\n                        if (l1.date === \"edit\" && l2.date !== \"edit\"){\n                            return 1;\n                        }\n\n                        if (l2.date === \"edit\" && l1.date !== \"edit\"){\n                            return -1;\n                        }\n\n                        if (l1.date === \"edit\" && l2.date === \"edit\"){\n                            return 1;\n                        }\n\n                        return new Date(l2.date) - new Date(l1.date);\n\n                    }if (store.sortBy === \"dn\"){\n                        if (l1.date === \"edit\" && l2.date !== \"edit\"){\n                            return 1;\n                        }\n\n                        if (l2.date === \"edit\" && l1.date !== \"edit\"){\n                            return -1;\n                        }\n\n                        if (l1.date === \"edit\" && l2.date === \"edit\"){\n                            return 1;\n                        }\n\n                        return new Date(l1.date) - new Date(l2.date);\n                    }\n                })\n                     .map((pair) => (\n                    <ListCard\n                        key={pair._id}\n                        idNamePair={pair}\n                        selected={false}\n                    />\n                ))\n            }\n            </Grid>;\n    }\n    return (\n        <div id=\"top5-list-selector\">\n            <div id=\"list-selector-list\">\n                {\n                    listCard\n                }\n            </div>\n            <DeleteModal />\n        </div>)\n}\n\nexport default UserLists;","/Users/ghost/Desktop/316-FinalProject/client/src/components/ComList.js",["186","187","188","189","190","191","192"],{"ruleId":"193","replacedBy":"194"},{"ruleId":"195","replacedBy":"196"},{"ruleId":"197","severity":1,"message":"198","line":30,"column":8,"nodeType":"199","endLine":30,"endColumn":10,"suggestions":"200"},{"ruleId":"201","severity":1,"message":"202","line":56,"column":13,"nodeType":"203","messageId":"204","endLine":62,"endColumn":14},{"ruleId":"205","severity":1,"message":"206","line":458,"column":58,"nodeType":"207","messageId":"204","endLine":458,"endColumn":60},{"ruleId":"208","severity":1,"message":"209","line":494,"column":17,"nodeType":"210","messageId":"211","endLine":494,"endColumn":24},{"ruleId":"208","severity":1,"message":"212","line":516,"column":13,"nodeType":"210","messageId":"211","endLine":516,"endColumn":14},{"ruleId":"208","severity":1,"message":"213","line":5,"column":8,"nodeType":"210","messageId":"211","endLine":5,"endColumn":19},{"ruleId":"208","severity":1,"message":"214","line":65,"column":11,"nodeType":"210","messageId":"211","endLine":65,"endColumn":30},{"ruleId":"208","severity":1,"message":"215","line":4,"column":10,"nodeType":"210","messageId":"211","endLine":4,"endColumn":13},{"ruleId":"208","severity":1,"message":"216","line":4,"column":15,"nodeType":"210","messageId":"211","endLine":4,"endColumn":25},{"ruleId":"208","severity":1,"message":"217","line":5,"column":8,"nodeType":"210","messageId":"211","endLine":5,"endColumn":15},{"ruleId":"208","severity":1,"message":"218","line":6,"column":8,"nodeType":"210","messageId":"211","endLine":6,"endColumn":12},{"ruleId":"208","severity":1,"message":"219","line":9,"column":8,"nodeType":"210","messageId":"211","endLine":9,"endColumn":15},{"ruleId":"208","severity":1,"message":"220","line":10,"column":8,"nodeType":"210","messageId":"211","endLine":10,"endColumn":18},{"ruleId":"208","severity":1,"message":"221","line":12,"column":10,"nodeType":"210","messageId":"211","endLine":12,"endColumn":15},{"ruleId":"197","severity":1,"message":"222","line":24,"column":8,"nodeType":"199","endLine":24,"endColumn":10,"suggestions":"223"},{"ruleId":"208","severity":1,"message":"224","line":26,"column":14,"nodeType":"210","messageId":"211","endLine":26,"endColumn":33},{"ruleId":"225","severity":1,"message":"226","line":37,"column":107,"nodeType":"227","messageId":"228","endLine":37,"endColumn":115},{"ruleId":"208","severity":1,"message":"229","line":5,"column":8,"nodeType":"210","messageId":"211","endLine":5,"endColumn":16},{"ruleId":"208","severity":1,"message":"218","line":6,"column":8,"nodeType":"210","messageId":"211","endLine":6,"endColumn":12},{"ruleId":"208","severity":1,"message":"219","line":11,"column":8,"nodeType":"210","messageId":"211","endLine":11,"endColumn":15},{"ruleId":"208","severity":1,"message":"230","line":49,"column":14,"nodeType":"210","messageId":"211","endLine":49,"endColumn":28},{"ruleId":"208","severity":1,"message":"231","line":55,"column":14,"nodeType":"210","messageId":"211","endLine":55,"endColumn":30},{"ruleId":"208","severity":1,"message":"232","line":73,"column":14,"nodeType":"210","messageId":"211","endLine":73,"endColumn":28},{"ruleId":"208","severity":1,"message":"233","line":18,"column":9,"nodeType":"210","messageId":"211","endLine":18,"endColumn":13},{"ruleId":"205","severity":1,"message":"234","line":44,"column":27,"nodeType":"207","messageId":"204","endLine":44,"endColumn":29},{"ruleId":"205","severity":1,"message":"234","line":50,"column":27,"nodeType":"207","messageId":"204","endLine":50,"endColumn":29},{"ruleId":"208","severity":1,"message":"221","line":10,"column":8,"nodeType":"210","messageId":"211","endLine":10,"endColumn":13},{"ruleId":"208","severity":1,"message":"235","line":2,"column":8,"nodeType":"210","messageId":"211","endLine":2,"endColumn":16},{"ruleId":"208","severity":1,"message":"236","line":9,"column":10,"nodeType":"210","messageId":"211","endLine":9,"endColumn":13},{"ruleId":"208","severity":1,"message":"237","line":10,"column":10,"nodeType":"210","messageId":"211","endLine":10,"endColumn":14},{"ruleId":"208","severity":1,"message":"238","line":3,"column":8,"nodeType":"210","messageId":"211","endLine":3,"endColumn":16},{"ruleId":"208","severity":1,"message":"215","line":4,"column":10,"nodeType":"210","messageId":"211","endLine":4,"endColumn":13},{"ruleId":"208","severity":1,"message":"239","line":4,"column":15,"nodeType":"210","messageId":"211","endLine":4,"endColumn":29},{"ruleId":"208","severity":1,"message":"216","line":4,"column":31,"nodeType":"210","messageId":"211","endLine":4,"endColumn":41},{"ruleId":"208","severity":1,"message":"217","line":5,"column":8,"nodeType":"210","messageId":"211","endLine":5,"endColumn":15},{"ruleId":"208","severity":1,"message":"218","line":6,"column":8,"nodeType":"210","messageId":"211","endLine":6,"endColumn":12},{"ruleId":"208","severity":1,"message":"219","line":9,"column":8,"nodeType":"210","messageId":"211","endLine":9,"endColumn":15},{"ruleId":"208","severity":1,"message":"220","line":10,"column":8,"nodeType":"210","messageId":"211","endLine":10,"endColumn":18},{"ruleId":"208","severity":1,"message":"240","line":20,"column":13,"nodeType":"210","messageId":"211","endLine":20,"endColumn":17},{"ruleId":"197","severity":1,"message":"222","line":24,"column":8,"nodeType":"199","endLine":24,"endColumn":10,"suggestions":"241"},{"ruleId":"225","severity":1,"message":"226","line":34,"column":147,"nodeType":"227","messageId":"228","endLine":34,"endColumn":155},{"ruleId":"208","severity":1,"message":"215","line":4,"column":10,"nodeType":"210","messageId":"211","endLine":4,"endColumn":13},{"ruleId":"208","severity":1,"message":"239","line":4,"column":15,"nodeType":"210","messageId":"211","endLine":4,"endColumn":29},{"ruleId":"208","severity":1,"message":"216","line":4,"column":31,"nodeType":"210","messageId":"211","endLine":4,"endColumn":41},{"ruleId":"208","severity":1,"message":"217","line":5,"column":8,"nodeType":"210","messageId":"211","endLine":5,"endColumn":15},{"ruleId":"208","severity":1,"message":"218","line":6,"column":8,"nodeType":"210","messageId":"211","endLine":6,"endColumn":12},{"ruleId":"208","severity":1,"message":"219","line":9,"column":8,"nodeType":"210","messageId":"211","endLine":9,"endColumn":15},{"ruleId":"208","severity":1,"message":"220","line":10,"column":8,"nodeType":"210","messageId":"211","endLine":10,"endColumn":18},{"ruleId":"208","severity":1,"message":"240","line":19,"column":13,"nodeType":"210","messageId":"211","endLine":19,"endColumn":17},{"ruleId":"197","severity":1,"message":"222","line":23,"column":8,"nodeType":"199","endLine":23,"endColumn":10,"suggestions":"242"},{"ruleId":"225","severity":1,"message":"226","line":33,"column":107,"nodeType":"227","messageId":"228","endLine":33,"endColumn":115},{"ruleId":"208","severity":1,"message":"215","line":4,"column":10,"nodeType":"210","messageId":"211","endLine":4,"endColumn":13},{"ruleId":"208","severity":1,"message":"216","line":4,"column":15,"nodeType":"210","messageId":"211","endLine":4,"endColumn":25},{"ruleId":"208","severity":1,"message":"217","line":5,"column":8,"nodeType":"210","messageId":"211","endLine":5,"endColumn":15},{"ruleId":"208","severity":1,"message":"218","line":6,"column":8,"nodeType":"210","messageId":"211","endLine":6,"endColumn":12},{"ruleId":"208","severity":1,"message":"219","line":9,"column":8,"nodeType":"210","messageId":"211","endLine":9,"endColumn":15},{"ruleId":"208","severity":1,"message":"220","line":10,"column":8,"nodeType":"210","messageId":"211","endLine":10,"endColumn":18},{"ruleId":"208","severity":1,"message":"240","line":19,"column":13,"nodeType":"210","messageId":"211","endLine":19,"endColumn":17},{"ruleId":"197","severity":1,"message":"222","line":23,"column":8,"nodeType":"199","endLine":23,"endColumn":10,"suggestions":"243"},{"ruleId":"225","severity":1,"message":"226","line":32,"column":152,"nodeType":"227","messageId":"228","endLine":32,"endColumn":160},{"ruleId":"208","severity":1,"message":"229","line":5,"column":8,"nodeType":"210","messageId":"211","endLine":5,"endColumn":16},{"ruleId":"208","severity":1,"message":"218","line":6,"column":8,"nodeType":"210","messageId":"211","endLine":6,"endColumn":12},{"ruleId":"208","severity":1,"message":"219","line":11,"column":8,"nodeType":"210","messageId":"211","endLine":11,"endColumn":15},{"ruleId":"208","severity":1,"message":"230","line":49,"column":14,"nodeType":"210","messageId":"211","endLine":49,"endColumn":28},{"ruleId":"208","severity":1,"message":"231","line":55,"column":14,"nodeType":"210","messageId":"211","endLine":55,"endColumn":30},{"ruleId":"208","severity":1,"message":"232","line":73,"column":14,"nodeType":"210","messageId":"211","endLine":73,"endColumn":28},{"ruleId":"244","severity":1,"message":"245","line":173,"column":86,"nodeType":"246","messageId":"247","endLine":173,"endColumn":112},"no-native-reassign",["248"],"no-negated-in-lhs",["249"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'auth'. Either include it or remove the dependency array.","ArrayExpression",["250"],"no-duplicate-case","Duplicate case label.","SwitchCase","unexpected","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","no-unused-vars","'newList' is assigned a value but never used.","Identifier","unusedVar","'m' is assigned a value but never used.","'EditToolbar' is defined but never used.","'handleCreateNewList' is assigned a value but never used.","'Fab' is defined but never used.","'Typography' is defined but never used.","'AddIcon' is defined but never used.","'List' is defined but never used.","'Divider' is defined but never used.","'IconButton' is defined but never used.","'Paper' is defined but never used.","React Hook useEffect has a missing dependency: 'store'. Either include it or remove the dependency array.",["251"],"'handleCreateNewList' is defined but never used.","array-callback-return","Array.prototype.sort() expects a value to be returned at the end of function.","FunctionExpression","expectedAtEnd","'ListItem' is defined but never used.","'handleLoadList' is defined but never used.","'handleToggleEdit' is defined but never used.","'handleKeyPress' is defined but never used.","'text' is assigned a value but never used.","Expected '!==' and instead saw '!='.","'Top5Item' is defined but never used.","'Box' is defined but never used.","'Grid' is defined but never used.","'ListCard' is defined but never used.","'stepperClasses' is defined but never used.","'auth' is assigned a value but never used.",["252"],["253"],["254"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","no-global-assign","no-unsafe-negation",{"desc":"255","fix":"256"},{"desc":"257","fix":"258"},{"desc":"257","fix":"259"},{"desc":"257","fix":"260"},{"desc":"257","fix":"261"},"Update the dependencies array to be: [auth]",{"range":"262","text":"263"},"Update the dependencies array to be: [store]",{"range":"264","text":"265"},{"range":"266","text":"265"},{"range":"267","text":"265"},{"range":"268","text":"265"},[806,808],"[auth]",[807,809],"[store]",[817,819],[782,784],[767,769]]